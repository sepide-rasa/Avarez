@model IEnumerable<Avarez.Models.sp_ListeSiyahSelect>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using Ext.Net.Utilities;
@{
    var X = Html.X();
}
<style>
    .colorlbl {
        color: red;
    }
</style>
@(Html.X().Panel()
    .Border(false)
            .ID("ListBlack")
                .Listeners(l => l.AfterRender.Handler = "LoadListBlack();")
    .Title("لیست سیاه")
    .AutoScroll(true)
    .Closable(true)
    .CloseAction(CloseAction.Destroy)
    //.Height(620)
    .Width(1000)
    .Layout(Ext.Net.LayoutType.Fit)
    //.LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
    .Items(
    X.Panel()
        .Border(false).Layout(Ext.Net.LayoutType.VBox).AutoScroll(true)
        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
    .Items(
        X.Hidden()
            .ItemID("fldId"),
        X.Panel()
            .KeyMap(
                    Html.X().KeyMap()
                            .ID("ListBlackMap")
                        .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
                        .Binding(b =>
                        {
                            b.Add(Html.X().KeyBinding()
                                .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                                .Handler("SaveListBlack(); ")
                            );
                            b.Add(Html.X().KeyBinding()
                                .KeysString(((int)Ext.Net.KeyCode.F2).ToString())
                                .Handler("EditListBlack(); ")
                            );
                            b.Add(Html.X().KeyBinding()
                                .KeysString(((int)Ext.Net.KeyCode.F4).ToString())
                                .Handler("DeleteListBlack(); ")
                            );

                        }))
            .Border(false)
            .BodyStyle("background-color:transparent;")
            .Layout(LayoutType.Fit)
            .ButtonAlign(Alignment.Center)
            .Buttons(
                X.Button()
                    .Text("ذخیره")
                    .Icon(Ext.Net.Icon.Disk)
                        .Hidden(!Avarez.Controllers.Users.Permossions.haveAccess(Convert.ToInt32(Session["UserId"]), 309))
                    .MarginSpec("10px 0 0 0")
        .ToolTip("کلید میانبر F8")
                    .Listeners(l =>
                    {
                        l.Click.Handler = "SaveListBlack();";

                    })
                    .ItemID("btnSave"),
                X.Button()
                    .Text("خروج")
                    .Icon(Ext.Net.Icon.DoorOut)
                    .ToolTip("کلید میانبر Esc")
                            .OnClientClick("App.ListBlack.destroy();"))
            .Items(
                X.FieldSet()
                    .Title("مشخصات")
                        .Width(550)
                        .Height(115)
                        .Defaults(new { Margin = 2 })
                        //.Layout(LayoutType.VBox)
                            //.LayoutConfig(new VBoxLayoutConfig { Align=VBoxAlign.Right })
                    .Items(
                        //X.Label("نوع محدودیت:"),
                            X.ComboBox()
                                    .ItemID("cboType")
                                    .FieldLabel("نوع محدودیت")
                                       .ForceSelection(true) 
                                       .Width(300)
                                       .AutoFocus(true)
                                .TypeAhead(true)
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .AllowBlank(false)
                                   .BlankText("لطفا نوع محدودیت را انتخاب نمایید.")
                                //.SelectedItems(new { Value = "2" })
                                .Items(
                                        new ListItem("جلوگیری از انجام هر کاری", "1"),
                                        new ListItem("جلوگیری از صدور فیش", "2")
                                    )
                        ,
                        //X.Label("پیغام:"),
                        X.TextArea()
                            .FieldLabel("پیغام")
                            .ItemID("txtMsg")
                            .AllowBlank(false)
                            .BlankText("لطفا پیغام را وارد نمایید.")
                            .Width(500)
                            //.LabelAlign(LabelAlign.Right)
                )
                ),
                    X.Panel()
                        .Border(false)
                        .Height(370)
                        .Width(900)
                        .Layout(LayoutType.Fit)
                            //.Listeners(l => l.AfterRender.Handler = "setSizeGridListBlack()")
                                .ID("pnlGridListBlack")
                        .Items(
                            X.GridPanel()
                                .TopBar(
                            Html.X().Toolbar()
                                .Items(
                                    X.Button()
                                        .Text("ویرایش")
                                        .Icon(Ext.Net.Icon.Pencil)
                                            .ToolTip("کلید میانبر F2")
                                                .Hidden(!Avarez.Controllers.Users.Permossions.haveAccess(Convert.ToInt32(Session["UserId"]), 310))
                                            .Listeners(Li => Li.Click.Handler = "EditListBlack();"),
                                    X.Button()
                                        .Text("حذف")
                                        .Icon(Ext.Net.Icon.Delete)
                                            .Hidden(!Avarez.Controllers.Users.Permossions.haveAccess(Convert.ToInt32(Session["UserId"]), 311))
                                            .ToolTip("کلید میانبر F4")
                                        .Listeners(de =>
                                        {
                                            de.Click.Handler = "if (App.ListBlack.queryById('GridListBlack').selModel.getLastSelected() == null) {Ext.MessageBox.show({ title: 'خطا', msg: 'لطفا یک سطر را انتخاب کنید',icon: Ext.MessageBox.ERROR,buttons: Ext.MessageBox.OK});return false;}else DeleteListBlack();";
                                        })
                                    )
                                )
                                        .ItemID("GridListBlack")
                                .BottomBar(X.PagingToolbar())
                                .Frame(true)
                                .AutoScroll(true)
                                .Title("لیست سیاه")
                                .Store(
                                    X.StoreForModel()
                                        .Parameters(new { CarId = @ViewBag.CarId })
                                        .Proxy(
                                            Html.X().AjaxProxy()
                                                .Url(Url.Action("Read"))
                                                .Reader(Html.X().JsonReader().Root("data"))
                                                )
                                        .PageSize(10)
                                        .RemoteFilter(true)
                                        .RemotePaging(true)
                                )
                                .View(
                                    Html.X().GridView().LoadingText("در حال بارگذاری...")
                                )
                                .Plugins(X.FilterHeader().Remote(false))
                                .SelectionModel(
                                    Html.X().RowSelectionModel()
                                        .Mode(SelectionMode.Single))
                                .ColumnModel(
                                    Html.X().RowNumbererColumn(),
                                        Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true).Hideable(false),
                                            Html.X().Column().DataIndex(Model, m => m.fldTypeS).Text("نوع محدودیت").Flex(3),
                                            Html.X().Column().DataIndex(Model, m => m.fldMsg).Text("پیغام").Flex(4)

                                        )
                        )
            )
            )
)
<script type="text/javascript">
    var CarId = '@ViewBag.CarId';
    function setSizeGridListBlack() {
        App.pnlGridListBlack.setSize(App.ListBlack.getWidth() - 10, App.ListBlack.getHeight() - 220);
    }
    function LoadListBlack() {
        App.ListBlack.queryById('cboType').validate();
        App.ListBlack.queryById('txtMsg').validate();
    }
    function DeleteListBlack() {
        var SelectedRow = App.ListBlack.queryById('GridListBlack').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال انجام عملیات ...' });
                        Ext.net.DirectMethod.request({
                            url: '/NewVer/ListBlack/Delete',
                            params: {
                                id: SelectedRow.data.fldId
                            },
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Er == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                App.ListBlack.queryById('GridListBlack').store.load();
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.net.icon.ERROR,
                buttons: Ext.MessageBox.Ok
            });
        }
    }
    function EditListBlack() {
        var SelectedRow = App.ListBlack.queryById('GridListBlack').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری ...' });
            Ext.net.DirectMethod.request({
                url: '/NewVer/ListBlack/Details',
                params: {
                    Id: SelectedRow.data.fldId
                },
                success: function (data) {
                    if (data.Er != 1) {
                        var cboType = App.ListBlack.queryById('cboType');
                        cboType.setValue(data.fldType);
                        var txtMsg = App.ListBlack.queryById('txtMsg');
                        txtMsg.setValue(data.fldMsg);
                        var Id = App.ListBlack.queryById('fldId');
                        Id.setValue(data.fldId);
                        CarId = data.CarId;
                    }
                    else {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function SaveListBlack() {

        var cboType = App.ListBlack.queryById('cboType');
        var txtMsg = App.ListBlack.queryById('txtMsg');
        var Id = App.ListBlack.queryById('fldId');
        var er = false;

        if (cboType.validate() == false) {
            er = true;
        }
        if (txtMsg.validate() == false) {
            er = true;
        }
        
        if (er == true)
            return;

        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        Ext.net.DirectMethod.request({
            url: '/NewVer/ListBlack/Save',
            params: {
                fldId: Id.getValue(),
                fldType: cboType.getValue(),
                fldMsg: txtMsg.getValue(),
                fldCarId: CarId
            },
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Err == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                App.ListBlack.queryById('GridListBlack').store.load();
                if (data.Err != 1)
                    ClearListBlack();

                Ext.net.Mask.hide();
            }

        });
    }
    function ClearListBlack() {
        App.ListBlack.queryById('cboType').setValue("");
        App.ListBlack.queryById('txtMsg').setValue("");
        App.ListBlack.queryById('fldId').setValue(0);
    }


    /*function EnterNext() {
        var keyfield = App.ListBlack.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        var nextfld = keyfield.nextSibling();
        nextfld.focus();
        nextfld.selectText();
    }*/

    function EnterNext() {

        if (App.AvarezTab.activeTab.id == "SearchParvande") {
            if (App.SearchParvande.activeTab.id == "EnteghalSavabegh") {
                var nextfld;
                var keyfield = App.EnteghalSavabegh.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                if (keyfield.itemId == "cboState") {
                    nextfld = App.EnteghalSavabegh.queryById("cboMun");
                }
                else if (keyfield.itemId == "btnSearchMun") {
                    nextfld = App.EnteghalSavabegh.queryById("CboAzSal");
                }
                else if (keyfield.itemId == "cboMun") {
                    nextfld = App.EnteghalSavabegh.queryById("CboAzSal");
                }
                else if (keyfield.itemId == "CboAzSal") {
                    nextfld = App.EnteghalSavabegh.queryById("CboTaSal");
                }
                else if (keyfield.itemId == "CboTaSal") {
                    nextfld = App.EnteghalSavabegh.queryById("txtShName");
                }
                else if (keyfield.itemId == "txtShName") {

                    nextfld = App.EnteghalSavabegh.queryById("txtDesc");
                }
                else {
                    nextfld = keyfield.nextSibling();
                }
                nextfld.focus();
                nextfld.selectText();
                /*var keyfield = App.SabtVarizi.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                /*var nextfld = keyfield.nextSibling();
                if (nextfld != null) {
                if (keyfield.itemId == "txtSerial" && keyfield.hidden == true)
                {
                    nextfld = nextfld.nextSibling();
                    nextfld.focus();
                    nextfld.selectText();
                }

                else if (nextfld.itemId == "txtMun" && nextfld.hidden == true)
                {
                    nextfld = nextfld.nextSibling().nextSibling();
                    nextfld.focus();
                    nextfld.selectText();
                }
                else if{
                    keyfield.focus();
                    keyfield.selectText();
                }
                }*/
            }
            else if (App.SearchParvande.activeTab.id == "SabtVarizi") {
                var nextfld;
                var keyfield = App.SabtVarizi.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                if (keyfield.itemId == "cboNoePardakht" && App.SabtVarizi.queryById("cboNoePardakht").getValue() == "1") {
                    nextfld = App.SabtVarizi.queryById("txtSerial");
                }
                else if (keyfield.itemId == "cboNoePardakht" && App.SabtVarizi.queryById("cboNoePardakht").getValue() == "2") {
                    nextfld = App.SabtVarizi.queryById("txtMun");
                }
                else if (keyfield.itemId == "txtSerial") {
                    nextfld = App.SabtVarizi.queryById("CboNoeVariz");
                }
                else if (keyfield.itemId == "txtMun") {
                    nextfld = App.SabtVarizi.queryById("txtSerialFish");
                }
                    /*else if (keyfield.itemId == "txtDescV") {
                        return;
                    }*/
                else {
                    nextfld = keyfield.nextSibling();
                }
                nextfld.focus();
                nextfld.selectText();
            }

            else if (App.SearchParvande.activeTab.id == "ListBlack") {
                var keyfield = App.ListBlack.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                var nextfld = keyfield.nextSibling();
                nextfld.focus();
                nextfld.selectText();
            }
            else if (App.SearchParvande.activeTab.id == "Parvande") {
                var keyfield = App.SearchParvande.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                if (keyfield.itemId == "txtSearch") {
                    FnSearchParvande();
                }
                else {
                    nextfld = keyfield.nextSibling();
                    nextfld.focus();
                }
            }
        }
        else if (App.AvarezTab.activeTab.id == "S_Mohasebat") {
            /* var keyfield = App.ListBlack.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
             var nextfld = keyfield.nextSibling();
             nextfld.focus();
             nextfld.selectText();*/
        }
        else if (App.AvarezTab.activeTab.id == "Fast_Fish") {
            /*var keyfield = App.S_Mohasebat.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);

            nextfld = keyfield.nextSibling();
            nextfld.focus();*/
        }
    }
</script>
