@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}


@(Html.X().Panel().Border(false)//.Modal(true)
    .Listeners(l => l.AfterRender.Handler = "FormLoad()")
        //.Width(500)//.Height(300)
    .Title("")
                     .ID("FromDate" + (string)ViewBag.State)
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
                    X.TabPanel().Border(false).ID("FromDateTab" + (string)ViewBag.State)
                .Items(

                    X.Panel().Border(false).Title("").ID("InnerTab" + (string)ViewBag.State)
                    .ButtonAlign(Ext.Net.Alignment.Center)
                .DefaultButton("btn")
            .TitleAlign(Ext.Net.TitleAlign.Center)
                   .Buttons(X.Button().Text("چاپ").Icon(Ext.Net.Icon.Printer).Margin(10)
                               .Listeners(l =>
                               {
                                   l.Click.Handler = "PrintFromDate()";

                               })
                               .ItemID("btnSave")
                                ,
                                X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).ToolTip("کلید میانبر Esc")
                                .OnClientClick("Ext.getCmp('FromDate" + (string)ViewBag.State + "').destroy()"))
                .Items(

                X.FieldSet().Border(false)
                .Center()
                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                .Defaults(new { Margin = 2 })
                .Items(
                        X.Label().Text("از تاریخ:")
                    , X.PDateField()
                        .ItemID("txtAzTarikh")
                        .Width(160)
                        .Editable(false)
                        .MsgTarget(Ext.Net.MessageTarget.Side)
                        .AllowBlank(false)
                        .MaskRe("/[0-9,/]/")
                        .BlankText("لطفا تاریخ را انتخاب نمایید.")
                        .Listeners(l => l.Change.Handler = "AzTarikh()")
                        .Listeners(l => l.AfterRender.Handler = "setOnlyOneMonth4()")
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                    , X.Label().Text("تا تاریخ:")
                    , X.PDateField()
                                .ItemID("txtTaTarikh")//.PaddingSpec("0 0 9px 0")
                        .Width(160)
                        .MsgTarget(Ext.Net.MessageTarget.Side)
                        .AllowBlank(false)
                        .Editable(false)
                        .MaskRe("/[0-9,/]/")
                        .BlankText("لطفا تاریخ را انتخاب نمایید.")
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                        .Listeners(l => l.Change.Handler = "TaTarikh()")
                ).ColSpan(3)

                       )
                            .Layout(Ext.Net.LayoutType.VBox)
                            .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
                    )

                )
)


<script type="text/javascript">

    function FormLoad() {
        if ('@ViewBag.State' == "1") {
            Ext.getCmp("FromDate" + '@ViewBag.State').setTitle("گزارش تاریخچه پرداخت ها");
            Ext.getCmp("InnerTab" + '@ViewBag.State').setTitle("گزارش تاریخچه پرداخت ها");
            /*App.FromDate.setTitle("گزارش تاریخچه پرداخت ها");
            App.InnerTab.setTitle("گزارش تاریخچه پرداخت ها");*/
        }
        else {
            Ext.getCmp("FromDate" + '@ViewBag.State').setTitle("گزارش وصول");
            Ext.getCmp("InnerTab" + '@ViewBag.State').setTitle("گزارش وصول");
            /*App.FromDate.setTitle("گزارش وصول");
            App.InnerTab.setTitle("گزارش وصول");*/
        }
    }

    function showBargozary() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال بارگذاری...',
            width: 300,
            wait: true,
            waitConfig:
            {
                /*duration: 10000,*/
                interval: 200,
                /*increment: 15,*/
                text: 'در حال بارگذاری...',
                scope: this
                /*fn: function () {
                    Ext.MessageBox.hide();
                    Ext.Msg.alert('Status', 'Saved successfully!');
                }*/
            }
        });
    }
    function setOnlyOneMonth4() {
        if ('@ViewBag.StartDate' != "0") {
            var fromID = App.AppReportTab.activeTab.id;
            var txtAzTarikh = Ext.getCmp(fromID).queryById('txtAzTarikh');
            txtAzTarikh.setMinValue(new Date('@ViewBag.StartDate'));
        }
    }

    function AzTarikh() {
        var fromID = App.AppReportTab.activeTab.id;
        var txtAzTarikh = Ext.getCmp(fromID).queryById('txtAzTarikh');
        var txtTaTarikh = Ext.getCmp(fromID).queryById('txtTaTarikh');
        txtTaTarikh.setMinValue(txtAzTarikh.getValue());
        txtTaTarikh.minText = "تاریخ شروع نباید از تاریخ پایان بزرگتر باشد.";
    }

    function TaTarikh() {
        var fromID = App.AppReportTab.activeTab.id;
        var txtAzTarikh = Ext.getCmp(fromID).queryById('txtAzTarikh');
        var txtTaTarikh = Ext.getCmp(fromID).queryById('txtTaTarikh');
        txtAzTarikh.setMaxValue(txtTaTarikh.getValue());
        txtAzTarikh.maxText = "تاریخ شروع نباید از تاریخ پایان بزرگتر باشد.";
    }

    function PrintFromDate() {
        var er = false;
        var fromID = App.AppReportTab.activeTab.id;
        if (Ext.getCmp(fromID).queryById('txtAzTarikh').validate() == false) {
            er = true;
        }
        if (Ext.getCmp(fromID).queryById('txtTaTarikh').validate() == false) {
            er = true;
        }
        if (er == true)
            return;

        showBargozary();
        if (App.AppReportTab.activeTab.id.substring(8) == "1") {
            Ext.net.DirectMethod.request({
                url: '/NewVer/AppReport_New/PrintCollectionLog',
                params: {
                    containerId: "FromDateTab" + App.AppReportTab.activeTab.id.substring(8),
                    SDate: Ext.getCmp(fromID).queryById('txtAzTarikh').rawValue,
                    EDate: Ext.getCmp(fromID).queryById('txtTaTarikh').rawValue
                },
                success: function () {
                    Ext.MessageBox.hide();
                }
            });
        }
        else {
            Ext.net.DirectMethod.request({
                url: '/NewVer/AppReport_New/PrintCollectionByUserId',
                params: {
                    containerId: "FromDateTab" + App.AppReportTab.activeTab.id.substring(8),
                    SDate: Ext.getCmp(fromID).queryById('txtAzTarikh').rawValue,
                    EDate: Ext.getCmp(fromID).queryById('txtTaTarikh').rawValue
                },
                success: function () {
                    Ext.MessageBox.hide();
                }
            });
        }
    }
</script>