@model Avarez.Models.ModelsofBankInf
@using Ext.Net.MVC;
@using Ext.Net;
@{

    var X = Html.X();
}

@(X.Panel()
         //   .Listeners(li => li.AfterRender.Handler = "SetSizeGride();")
        .ID("BankInf")
    .Title("تعریف اطلاعات پرداخت آنلاین")
                                    
    
    .Closable(true)
    .Border(false)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Layout(Ext.Net.LayoutType.Fit)
    .Items(
        X.Panel()
                    .ItemID("PnlGridBankInf")
            .Border(false)
            .Frame(false)
            //.Layout(Ext.Net.LayoutType.VBox)
                       // .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
            .Items(
            X.FieldSet()
            .Border(false)
            .Layout(Ext.Net.LayoutType.Table)
                                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 6 })
                              //  .Defaults(new { Margin =5 })                                
                            .Items(
                                        //X.Label("نام بانک:")
                                        //        .PaddingSpec("10px 0 0 0"),
                                        //X.ComboBox()
                                        //    .PaddingSpec("10px 0 0 10px")
                                        //.ItemID("cboBankName")
                                        //.EmptyText("نام بانک...")
                                        //.TypeAhead(true)
                                        //.AllowBlank(false)
                                        //.BlankText("لطفا نام بانک را انتخاب نمایید.")
                                        //.MsgTarget(Ext.Net.MessageTarget.Side)
                                        //.QueryMode(DataLoadMode.Local)
                                        //.ForceSelection(true)
                                        //.Editable(false)
                                        //.Width(190)
                                        //.TriggerAction(TriggerAction.All)
                                        //.DisplayField("fldName")
                                        //.ValueField("fldID")
                                        //.Store(X.Store()
                                        //    .Model(X.Model()
                                        //        .IDProperty("fldID")
                                        //        .Fields(
                                        //            new ModelField("fldID", ModelFieldType.String) { Mapping = "fldID" },
                                        //            new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" })
                                        //            )
                                        //    .Proxy(X.AjaxProxy()
                                        //        .Url(Url.Action("GetCascadeBank"))
                                        //        .Reader(X.JsonReader().Root("data")))
                                        //        )
                                        //    , 
                                            X.Label("استان:")
                                                    .PaddingSpec("10px 0 0 0"),
                                                     X.ComboBox()
                                                .PaddingSpec("10px 0 0 10px")
                                                    .ItemID("CboState")
                                                .LabelAlign(Ext.Net.LabelAlign.Top)
                                                .Editable(false)
                                                .TypeAhead(true)
                                                .QueryMode(DataLoadMode.Local)
                                                .ForceSelection(true)
                                                .TriggerAction(TriggerAction.All)
                                                    .DisplayField("Name")
                                                    .ValueField("ID")
                                                .EmptyText("استان...")
                                                .Width(190)
                                                .Listeners(ls =>
                                                                    ls.Select.Handler = " App.BankInf.queryById('cboMnu').getStore().load();"
                                                                        )
                                                        .Store(X.Store()//.AutoLoad(false)
                                                    .Model(X.Model()
                                                                .IDProperty("fldStateId")
                                                        .Fields(
                                                                    new ModelField("ID", ModelFieldType.String) { Mapping = "fldID" },
                                                                    new ModelField("Name", ModelFieldType.String) { Mapping = "fldName" }
                                                        )
                                                    )
                                                    .Proxy(X.AjaxProxy()
                                                            .Url(Url.Action("GetCascadeState"))
                                                        .Reader(X.JsonReader().Root("data"))
                                                    )
                                            )
                                                .AllowBlank(false)
                                                .MsgTarget(Ext.Net.MessageTarget.Side)
                                                .BlankText("لطفا استان را انتخاب نمایید.")
                                                ,
                                                    X.Label("شهرداری:")
                                                    .PaddingSpec("10px 0 0 0"),
                                            X.ComboBox()
                                                .PaddingSpec("10px 0 0 10px")
                                        .ItemID("cboMnu")
                                        .EmptyText("نام شهرداری...")
                                        .LabelAlign(Ext.Net.LabelAlign.Left)
                                        .TypeAhead(true)
                                        .Editable(false)
                                        .AllowBlank(false)
                                        .BlankText("لطفا شهرداری مورد نظر را انتخاب نمایید.")
                                        .QueryMode(DataLoadMode.Local)
                                        .ForceSelection(true)
                                        .Width(190)
                                        .TriggerAction(TriggerAction.All)
                                            .DisplayField("fldName")
                                            .ValueField("fldID")
                                                .Listeners(ls => ls.Select.Handler = " App.BankInf.queryById('cboLocal').getStore().load();LoadGridInf(5);")
                                            .Store(X.Store().AutoLoad(false)
                                            .Model(X.Model()
                                            .IDProperty("fldID")
                                                .Fields(
                                                        new ModelField("fldID", ModelFieldType.String) { Mapping = "fldID" },
                                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" })
                                                    )
                                            .Proxy(X.AjaxProxy()
                                                    .Url(Url.Action("GetCascadeCounty"))
                                                .Reader(X.JsonReader().Root("data")))
                                                            .Parameters(ps => ps.Add(new StoreParameter("CboState", "App.BankInf.queryById('CboState').getValue()", ParameterMode.Raw)))
                                                            ),
                                            X.Label("نام منطقه:")
                                                    .PaddingSpec("10px 0 0 0"),
                                            X.ComboBox()
                                                .PaddingSpec("10px 0 0 10px")
                                            .ItemID("cboLocal")
                                            .EmptyText("نام منطقه...")
                                            .LabelAlign(Ext.Net.LabelAlign.Top)
                                            .TypeAhead(true)
                                                .AllowBlank(false)
                                            .Editable(false)
                                            .BlankText("لطفا منطقه مورد نظر را انتخاب نمایید.")
                                            .QueryMode(DataLoadMode.Local)
                                            .MsgTarget(Ext.Net.MessageTarget.Side)
                                            .ForceSelection(true)
                                            .Width(190)
                                                .Listeners(ls => ls.Select.Handler = "LoadGridInf(6);")
                                            .TriggerAction(TriggerAction.All)
                                                .DisplayField("fldName")
                                                .ValueField("fldID")
                                            .Store(X.Store()
                                                .AutoLoad(false)
                                                .Model(X.Model()
                                                .IDProperty("fldID")
                                                    .Fields(
                                                        new ModelField("fldID", ModelFieldType.String) { Mapping = "fldID" },
                                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" })
                                                        )
                                                .Proxy(X.AjaxProxy()
                                                    .Url(Url.Action("GetCascadeLocal"))
                                                    .Reader(X.JsonReader().Root("data")))
                                                            .Parameters(ps => ps.Add(new StoreParameter("cboMnu", "App.BankInf.queryById('cboMnu').getValue()", ParameterMode.Raw)))
                                                        )
                            )
            ,
                    X.GridPanel()
                    .Listeners(l => l.ItemClick.Handler = "ReloadGridDetail();")
                //.Height(400)
                    .AutoScroll(true)
                    .TopBar(
                        Html.X().Toolbar()
                            .Items(
                            X.Button()
                                            .Text("جدید")
                                            .Icon(Ext.Net.Icon.Add)
                                            .Listeners(de => de.Click.Handler = "NewBankInf();")
                                            ,
                                X.Button()
                                    .Text("حذف")
                                    .Icon(Ext.Net.Icon.Delete)
        //.ToolTip("کلید میانبر F9")
                                        .Listeners(de => de.Click.Handler = "DeleteBankInf();")
                                                    .Listeners(l => l.Render.Handler = "App.BankInf.queryById('GridBankInf').setHeight((Ext.getBody().getViewSize().height-110)/2);")
                                , X.Button()
                                .Text("راهنما")
                                .Icon(Ext.Net.Icon.Help)
                                    .Listeners(de => de.Click.Handler = "HelpBankInf();")
                                    )
                                    )
                                    .ItemID("GridBankInf")
                  //  .BottomBar(X.PagingToolbar())
                    .Store(
                            X.StoreFor(Model.BankInf)
                           // .Proxy(Html.X().AjaxProxy()
                              //  .Url(Url.Action("Read"))
                             //   .Reader(Html.X().JsonReader().Root("data"))
       // )
                        .PageSize(20)
                    .RemoteFilter(true)
                    .RemotePaging(true)
                                .Listeners(l => l.DataChanged.Handler = "App.BankInf.queryById('GridBankInf').selModel.refresh();")
    )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
    )
                   // .Plugins(X.FilterHeader().Remote(true))
                    .ColumnModel(
                            Html.X().RowNumbererColumn(),
                                Html.X().Column().DataIndex(Model.BankInf, m => m.BankId).Text("کد بانک").Hidden(true).Flex(1),
                                Html.X().Column().DataIndex(Model.BankInf, m => m.fldLocalID).Text("کد منطقه").Hidden(true).Flex(1),
                                Html.X().Column().DataIndex(Model.BankInf, m => m.fldMunId).Text("کد شهرداری").Hidden(true).Flex(1),
                                Html.X().Column().DataIndex(Model.BankInf, m => m.fldCountryDiv).Text("کد تقسیمات کشوری").Hidden(true).Flex(1),
                                Html.X().Column().DataIndex(Model.BankInf, m => m.fldBankName).Text("نام بانک").Flex(2),
                                Html.X().Column().DataIndex(Model.BankInf, m => m.fldMunName).Text("شهرداری").Flex(8)
    )
                .SelectionModel(
                    Html.X().RowSelectionModel()
                        .Mode(Ext.Net.SelectionMode.Single)
    )
        ,
                X.GridPanel()
                                   .Listeners(l => l.Render.Handler = "App.BankInf.queryById('GridBankInfDetails').setHeight((Ext.getBody().getViewSize().height-110)/2);")
        // .Height(400)
                            .AutoScroll(true)
                            .TopBar(
                                Html.X().Toolbar()
                                    .Items(
                                        X.Button()
                                            .Text("ذخیره")
                                            .Icon(Ext.Net.Icon.Disk)
        //.ToolTip("کلید میانبر F9")
                                            .Listeners(de => de.Click.Handler = "SaveBankDetail();")
                                                    
                                            )
                                            )
                                                .ItemID("GridBankInfDetails")
                         //   .BottomBar(X.PagingToolbar())
                            .Store(
                                     X.StoreFor(Model.BankInfDetails)
        //      .Proxy(Html.X().AjaxProxy()
        //  .Url(Url.Action("Read"))
        //       .Reader(Html.X().JsonReader().Root("data"))
        // )
                            .PageSize(20)
                            .RemoteFilter(true)
                            .RemotePaging(true)
            )
                            .View(
                                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
            )
                           // .Plugins(X.FilterHeader().Remote(true))
                               .Plugins(Html.X().CellEditing())
                            .ColumnModel(
                                    Html.X().RowNumbererColumn(),
                                            Html.X().Column().DataIndex(Model.BankInfDetails, m => m.fldID).Text("کد ").Hidden(true).Flex(1),
                                            Html.X().Column().DataIndex(Model.BankInfDetails, m => m.fldBankID).Text("کد ").Hidden(true).Flex(1),
                                            Html.X().Column().DataIndex(Model.BankInfDetails, m => m.fldPropertyNameEN).Text("نام خاصیت(انگلیسی)").Flex(2),
                                            Html.X().Column().DataIndex(Model.BankInfDetails, m => m.fldPropertyNameFA).Text("نام خاصیت(فارسی)").Flex(2),
                                            Html.X().Column().DataIndex(Model.BankInfDetails, m => m.value).Text("مقدار").Flex(6).Editor(X.TextField())
            )
                        .SelectionModel(
                            Html.X().RowSelectionModel()
                                .Mode(Ext.Net.SelectionMode.Single)
            )
)
)
)

<script type="text/javascript">

    function CustomerMap() {
        var k = new Ext.KeyMap(
            document,
            [{
                target: Ext.get('Customer'),
                scope: this,
                key: [119],
                fn: function (key, event) {
                    if (App.Customer && App.NewCustomer) {
                        if (App.NewCustomer.active == false)
                            NewBankType();
                    }
                    else if (App.Customer && !App.NewCustomer)
                        NewBankType();
                }
            },
            {
                target: App.Customer.getTargetEl(),
                scope: this,
                key: [113],
                fn: function (key, event) {
                    if (App.Customer && App.NewCustomer) {
                        if (App.NewCustomer.active == false)
                            EditBankType();
                    }
                    else if (App.Customer && !App.NewCustomer)
                        EditBankType();
                }
            },
            {
                target: App.Customer.getTargetEl(),
                scope: this,
                key: [120],
                fn: function (key, event) {
                    if (App.Customer && App.NewCustomer) {
                        if (App.NewCustomer.active == false)
                            DeleteBankType();
                    }
                    else if (App.Customer && !App.NewCustomer)
                        DeleteBankType();
                }
            }]
            )
    }

    function NewBankInf() {
        var cboMnu = App.BankInf.queryById('cboMnu');
        var cboLocal = App.BankInf.queryById('cboLocal');
        var er = false;

        if (cboMnu.validate() == false) {
            er = true;
        }
        if (er == true)
            return;
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/NewVer/BankInf_New/New',
            params: {
                MunId: cboMnu.getValue(),
                LocalId: cboLocal.getValue()
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }

    function EditBankInf() {
        var SelectedRow = App.BankInf.queryById('GridBankInf').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/NewVer/BankInf_New/New',
                params: {
                    Id: SelectedRow.data.fldID,
                },
                success: function () {
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب نمایید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function DeleteBankInf() {
        var SelectedRow = App.BankInf.queryById('GridBankInf').selModel.getLastSelected();
        var DivisionID = SelectedRow.data.fldCountryDiv;
        var BankId = SelectedRow.data.BankId;
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                        Ext.net.DirectMethod.request({
                            url: '/NewVer/BankInf_New/Delete',
                            params: {
                                DivisionID: DivisionID,
                                BankId: BankId
                            },
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Er == 1)
                                    ic = Ext.MessageBox.ERROR;
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                Ext.net.Mask.hide();
                                LoadGridWhenDel();
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب نمایید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function SetSizeGride() {
        App.BankInf.queryById('GridBankInf').setHeight(App.BankInf.getHeight() / 2);
        App.BankInf.queryById('GridBankInfDetails').setHeight(App.BankInf.getHeight() / 2);
    }
    function LoadGridInf(Type) {
        var cboMnu = App.BankInf.queryById('cboMnu');
        var Val = cboMnu.getValue();
        var cboLocal = App.BankInf.queryById('cboLocal');
        if (Type == 6)
            Val = cboLocal.getValue();

        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/NewVer/BankInf_New/Reload',
            params: {
                type: Type,
                value: Val
            },
            success: function (data) {
                Ext.net.Mask.hide();
                App.BankInf.queryById('GridBankInf').getStore().loadData(data);
            }
        });
    }
    function ReloadGridDetail() {
        var SelectedRow = App.BankInf.queryById('GridBankInf').selModel.getLastSelected();
        var cboMnu = App.BankInf.queryById('cboMnu');
        var cboLocal = App.BankInf.queryById('cboLocal');
        /* var cboBankName = App.BankInf.queryById('cboBankName');*/
       
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/NewVer/BankInf_New/ReloadDetailGrid',
            params: {
                BankId: SelectedRow.data.BankId,
                MunId: SelectedRow.data.fldMunId,
                LocalId: SelectedRow.data.fldLocalID
            },
            success: function (data) {
                Ext.net.Mask.hide();
                App.BankInf.queryById('GridBankInfDetails').getStore().loadData(data);
            }
        });
    }
    function SaveBankDetail() {
        var SelectedRow = App.BankInf.queryById('GridBankInf').selModel.getLastSelected();
        var fldDivisionID = SelectedRow.data.fldCountryDiv;
        var BankDetail = new Array();
        var fldBankId;
        var fldParametrID;
        var fldValue;
        var SelectedRow = App.BankInf.queryById('GridBankInfDetails');
        for (var i = 0; i < SelectedRow.selModel.store.count() ; i++) {
            row = SelectedRow.selModel.store.data.items[i];
            fldBankId = row.data.fldBankID;
            fldValue = row.data.value;
            fldParametrID = row.data.fldID;
            BankDetail.push({
                'fldBankId': fldBankId,
                'fldDivisionID': fldDivisionID,
                'fldParametrID': fldParametrID,
                'fldValue': fldValue
            });
        }
        var data1 = {
            ArrayL: BankDetail
        };
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        $.ajax({
            type: "POST",
            url: '/NewVer/BankInf_New/Grid_Save',
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(data1),
            datatype: "json",
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                ReloadGridDetail();
                Ext.net.Mask.hide();
            },
            failure: function (data) {
                alert(data.data);
            }
        });
    }
    function LoadGridWhenDel() {
        var cboMnu = App.BankInf.queryById('cboMnu');
        var Val = cboMnu.getValue();
        var cboLocal = App.BankInf.queryById('cboLocal');
        var Type = 5;
        if (cboLocal.getValue() != null) {
            Val = cboLocal.getValue();
            Type = 6;
        }
        Ext.net.DirectMethod.request({
            url: '/NewVer/BankInf_New/Reload',
            params: {
                type: Type,
                value: Val
            },
            success: function (data) {
                Ext.net.Mask.hide();
                App.BankInf.queryById('GridBankInf').getStore().loadData(data);
                App.BankInf.queryById('GridBankInfDetails').getStore().loadData("");
            }
        });
    }

    function HelpBankInf() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/NewVer/BankInf_New/Help',
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }

</script>