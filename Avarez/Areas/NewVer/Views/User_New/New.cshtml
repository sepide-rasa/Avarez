@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

<style>
    .LblStyle {
        height: auto;
    }

    .LblRed {
        color: red;
    }

    .trheight {
        height: 40px;
    }
</style>

@(Html.X().Window()
    .Modal(true)
        //.Listeners(li => li.AfterLayout.Handler = "LoadUser_New();")
    .Width(830)
    .Height(650)
    .Resizable(false)
    .Title("تعریف کاربر")
    .ID("NewUser_New")
    .Closable(true).ButtonAlign(Ext.Net.Alignment.Center)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Layout(LayoutType.Fit)
    .Buttons(
        X.Button()
            .Text("ذخیره")
            .Icon(Ext.Net.Icon.Disk)//.ToolTip("کلید میانبر F8")
            .Listeners(l =>
            {
                l.Click.Handler = "SaveUser_New();";
            }),
        X.Button()
            .Text("خروج")
            .Icon(Ext.Net.Icon.DoorOut)//.ToolTip("کلید میانبر Esc")
            .OnClientClick("App.NewUser_New.destroy()"))
    .Items(
        X.FormPanel()
        .Border(false).AutoScroll(true)
        .Layout(LayoutType.Fit)
        .Items(
        X.Panel()
                    .Border(false).AutoScroll(true)
                //.PaddingSpec("10px 0 0 0")
                .Layout(Ext.Net.LayoutType.VBox)
                .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Center })
                .Items(
            X.Panel()
                .Border(false)
                
                .Layout(Ext.Net.LayoutType.HBox)
                .LayoutConfig(new Ext.Net.HBoxLayoutConfig { Align = HBoxAlign.Middle })
                     .Defaults(new { Margin = 2 })
                .Items(
                    X.Hidden()
                        .ItemID("fldId"),
                        X.Hidden().ItemID("countryId"),
                        X.Hidden().ItemID("countrySID"),
                        X.Hidden().ItemID("countryNType"),
                                    //               X.Panel()
                                    //.Layout(LayoutType.HBox)
                                    //.Border(false)
                                   
                        X.FieldSet()
                                        .PaddingSpec("5px 5px 5px 5px")
                            .Border(true)
                            .Title("گروه کاربری")
                            .Width(388)
                            .Height(300)
                            .Defaults(new { Margin = 2 })
                        .Items(
                            X.TreePanel()
                            .ID("TreeGroup")
                            .AutoScroll(true)
                            .Width(355)
                            .Expand(true)
                            .Height(290)
                            .Expand(true)
                            .UseArrows(true)
                            .Border(false)
                            .Listeners(a =>
                            {
                                a.ItemClick.Handler = "GetGroupId(record);";
                                a.AfterRender.Handler = "this.getRootNode().expand();";
                            })
                            .Root(Html.X().Node().NodeID("0").Text("گروه کاربری"))
                                    .Listeners(l =>
                                    {
                                        l.BeforeLoad.Fn = "nodeLoadGroup";
                                    })),
                                        X.FieldSet()
                                            .Border(true)
                                            .Title("موقعیت در تقسیمات کشوری")
                                            .Width(388)
                                            .Height(300)
                                            .Defaults(new { Margin = 2 })
                                            .Items(
                                                X.TreePanel()
                                                    .ID("TreeCountryD")
                                                    .AutoScroll(true)
                                                    .Width(355)
                                                    .Height(230)
                                                    .Expand(true)
                                                    .UseArrows(true)
                                                    .Listeners(l => l.ItemExpand.Handler = "LoadUser_New()")
                                                    .Border(false)
        //.Store(
        //    Html.X().TreeStore()
        //        .Listeners(l => l.Load.Handler = "alert('test');")
        //            .Proxy(
        //                Html.X().AjaxProxy()
        //                    .Url(Url.Action("nodeLoadTreeCountryU"))
        //                    )
        //            )
                                                    .Listeners(a =>
                                                    {
                                                        a.Select.Handler = "GetTreeCountryIdU(record);";
                                                        a.AfterRender.Handler = "this.getRootNode().expand();";
                                                        a.BeforeLoad.Fn = "nodeLoadTreeCountryU";                                                        
                                                    })
                                                    .Root(Html.X().Node().NodeID("0").Cls("0").DataPath("0").Text("تقسیمات کشوری")),
                                                X.Label()
                                                    .Cls("LblRed")
                                                    .Text("مورد انتخاب شده: "),
                                                X.Label()
        //.Cls("LblStyle")
                                                    .ItemID("lblTitleCountry")
                                                )

                                        ),
                    X.Panel()
                        .Layout(LayoutType.HBox)
                        .Border(false)
                        //.Defaults(new { Margin = 5 })
                        .Items(
                            X.FieldSet()
                                .Border(true)
                                .Defaults(new { Margin = 2 })
                                .Title("مشخصات شخص")
                                .Width(780)
                                //.Height(146)
                                .LayoutConfig(new TableLayoutConfig { Columns = 6, TRAttrs = { Cls = "trheight" } })
                                    .Items(X.Label("نوع شخص:"),
                                          X.ComboBox()
                                            .ItemID("cboUserType")
                                        .LabelAlign(Ext.Net.LabelAlign.Top)
                                        .Editable(false)
                                        .TypeAhead(true)
                                        .QueryMode(DataLoadMode.Local)
                                            .Listeners(l => l.Select.Handler = "ChangeType();")
                                        .ForceSelection(true)
                                        .TriggerAction(TriggerAction.All)
                                        .DisplayField("Name")
                                        .ValueField("ID")
                                        .EmptyText("وضعیت...")
                                        .Width(170)
                                        .Items(
                                                    new ListItem("حقیقی", "0"),
                                                    new ListItem("حقوقی", "1")
                                        )
                                        .SelectedItems(new { Value = "0" })
                                        .MsgTarget(Ext.Net.MessageTarget.Side),
                                    X.Label("نام :"),
                                    X.TextField()
                                        .AutoFocus(true)
                                        .ItemID("txtName")
                                        .EnableKeyEvents(true)
                                       // .Listeners(l => l.KeyUp.Fn = "onInitializeToFNName")
                                        .EnforceMaxLength(true)
                                        .MaxLength(50)
                                        .Width(170)
                                        .MaskRe("[[أ-ئ,ا-ی, ]")
                                        .AllowBlank(false)
                                        .BlankText("لطفا نام را وارد نمایید.")
                                        .MsgTarget(MessageTarget.Side),
                                    X.Label("نام خانوادگی :").ItemID("lblFamily"),
                                    X.TextField()
                                        .ItemID("txtFamily")
                                        .MaskRe("[أ-ئ,ا-ی, ]")
                                        .EnableKeyEvents(true)
                                       // .Listeners(l => l.KeyUp.Fn = "onInitializeToFNFamily")
                                        .EnforceMaxLength(true)
                                        .MaxLength(50)
                                        .Width(170)
                                        //.AllowBlank(false)
                                        //.BlankText("لطفا نام خانوادگی را وارد نمایید.")
                                        /*.MsgTarget(MessageTarget.Side)*/,
                                    X.Label("نام کاربری :").ItemID("lblUser"),
                                    X.TextField()
                                        .ItemID("txtUser")
                                        .EnforceMaxLength(true)
                                        .MaxLength(50)
                                        .Width(170)
                                        .AllowBlank(false)
                                        .BlankText("لطفا نام کاربری را وارد نمایید.")
                                        .MsgTarget(MessageTarget.Side),
                                    X.Label("کلمه عبور :").ItemID("lblPassword"),
                                    X.TextField()
                                        .ItemID("txtPassword")
                                        .InputType(Ext.Net.InputType.Password)
                                        .EnforceMaxLength(true)
                                        .MaxLength(50)
                                        .Width(170)
                                        .AllowBlank(false)
                                        .BlankText("لطفا کلمه عبور را وارد نمایید.")
                                        .MsgTarget(MessageTarget.Side),
                                    X.Label("کد/شناسه ملی :"),
                                    X.TextField()
                                        .MaskRe("[0-9]")
                                        .ItemID("txtMeliCode")
                                        .EnforceMaxLength(true)
                                        .MinLength(10)
                                        .MaxLength(11)
                                        .Width(170)
                                        .AllowBlank(false)
                                        .BlankText("لطفا کد ملی/شناسه ملی را وارد نمایید.")
                                        .MsgTarget(MessageTarget.Side)
                                        //.Plugins(X.InputMask()
                                        //    .Mask("AAAAAAAAAA")
                                        //    .UnmaskOnBlur(true)
                                        //    .ClearWhenInvalid(true)
                                        //    .MaskSymbols(ls =>
                                        //    {
                                        //        ls.Add(new MaskSymbol { Name = "A", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                        //    })
                                        //),
                                      ,X.Label("وضعیت:"), 
                                      X.ComboBox()
                                        .ItemID("cboStatus")
                                    .LabelAlign(Ext.Net.LabelAlign.Top)
                                    .Editable(false)
                                    .TypeAhead(true)
                                    .QueryMode(DataLoadMode.Local)
                                    .ForceSelection(true)
                                    .TriggerAction(TriggerAction.All)
                                    .DisplayField("Name")
                                    .ValueField("ID")
                                    .EmptyText("وضعیت...")
                                    .Width(170)
                                    .Items(
                                                new ListItem("فعال", "1"),
                                                new ListItem("غیر فعال", "0")
                                    )
                                            .SelectedItems(new { Value = "1" })
                                    //.AllowBlank(false)
                                    .MsgTarget(Ext.Net.MessageTarget.Side),
                                    //.BlankText("لطفا یک آیتم را انتخاب نمایید."),
                                         X.Label("ایمیل:"),
                                        X.TextField()
                                            .ItemID("txtMail")
                                            //.MaskRe("[0-9,a-z,A-Z,!-*]")
                                            .EnableKeyEvents(true)
                                            .Listeners(l => l.KeyUp.Fn = "onInitializeToEn")
                                            .EnforceMaxLength(true)
                                            .MaxLength(50)
                                            //.InputType(Ext.Net.InputType.Email)
                                            .Width(170)
                                            /*.AllowBlank(false)*/
                                            .BlankText("لطفا ایمیل را وارد نمایید.")
                                            .MsgTarget(MessageTarget.Side)
                                           ,
                                    X.Label()
                                        .Text("تاریخ شروع:"),
                                    X.PDateField()
                                        .ItemID("txtSDate")
                                        .Width(170)
                                        .BlankText("لطفا تاریخ شروع را وارد نمایید.")
                                        .MsgTarget(Ext.Net.MessageTarget.Side)
                                        .AllowBlank(false)
                                        .Editable(false),
                                    X.Label("پیش شماره:"),
                                    X.TextField()
                                        .ItemID("txtCodeT")
                                        .EnforceMaxLength(true)
                                        .Width(170)
                                        .MaskRe("[0-9]")
                                        .AllowBlank(false)
                                        .MaxLength(3)
                                        .MinLength(3)
                                        .BlankText("لطفا پیش شماره را وارد نمایید.")
                                        .MsgTarget(MessageTarget.Side)
                                        .Regex(@"^[0]")
                                            /*.Plugins(X.InputMask()
                                            .Mask("0AB")
                                            .ClearWhenInvalid(true)
                                            .MaskSymbols(ls =>
                                            {
                                                ls.Add(new MaskSymbol { Name = "A", Regex = "[1-9]", Placeholder = "_".ToCharArray()[0] });
                                                 ls.Add(new MaskSymbol{Name = "B", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                            })
                                        )*/,
                            X.Label("شماره تلفن:"),
                            X.TextField()
                                .ItemID("txtTel")
                                .EnforceMaxLength(true)
                                .MaxLength(8)
                                .MinLength(8)
                                .Width(170)
                                .MaskRe("[0-9]")
                                .AllowBlank(false)
                                .Regex(@"^[1-9]")
                                .BlankText("لطفا شماره تلفن را وارد نمایید.")
                                .MsgTarget(MessageTarget.Side)
                                    /*.Plugins(X.InputMask()
                                    .Mask("ABBBBBBB")
                                    .ClearWhenInvalid(true)
                                    .MaskSymbols(ls =>
                                    {
                                        ls.Add(new MaskSymbol { Name = "A", Regex = "[1-9]", Placeholder = "_".ToCharArray()[0] });
                                        ls.Add(new MaskSymbol { Name = "B", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                    })
                                )*/,
                                X.Label("شماره موبایل:"),
                                X.TextField()
                                
                                .ItemID("txtCell")
                                .MsgTarget(Ext.Net.MessageTarget.Side)
                                .AllowBlank(false)
                                .EnforceMaxLength(true)
                                .MaxLength(11)
                                .MinLength(11)
                                .Width(170)
                                .MaskRe("/[0-9]/")
                                .Regex(@"^[0]")
                                //.Width(190)
                                .BlankText("لطفا شماره موبایل را وارد کنید.")
                                //.EmptyText("09111111111")
                                    /*.Plugins(X.InputMask()
                                        .Mask("0BAAAAAAAAA")
                                        .ClearWhenInvalid(true)
                                        .MaskSymbols(ls =>
                                        {
                                            ls.Add(new MaskSymbol { Name = "A", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                            ls.Add(new MaskSymbol { Name = "B", Regex = "[9]", Placeholder = "_".ToCharArray()[0] });
                                        })
                                    )*/,
                                X.Label("کد مبدا(کانون):"),
                                    X.TextField()
                                    .ItemID("txtCode")
                                    .MsgTarget(Ext.Net.MessageTarget.Side)
                                    //.AllowBlank(false)
                                    .Width(170)
                                    .EnforceMaxLength(true)
                                    .MaxLength(50)
                                    //    .BlankText("لطفا کد مبدا را وارد کنید."),
                            ,X.Label("توضیحات :"),
                                X.TextArea()
                                    .ItemID("txtDesc")
                                    .Width(170)
                                    .MsgTarget(MessageTarget.Side).ColSpan(4)
                        )
                        )
                                      , X.FieldSet()
                            .Border(true)
                            .Height(190)
                            .Title("انتخاب عکس(حداکثر حجم مجاز: 100KB)")
                            .Layout(LayoutType.HBox)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle })
        /*.LayoutConfig(new TableLayoutConfig { Columns=3})*/
                            .Width(780)
        //.Defaults(new { Margin = 2 })
                            .Items(
                                X.FileUploadField()
                                    .ID("FileUploadField1")
                                   // .MarginSpec("0 2px 0 0")
                                    .Icon(Ext.Net.Icon.DiskUpload)
                                    .ButtonOnly(true)
                                    .ButtonText("انتخاب فایل")
                                    .DirectEvents(l =>
                                    {
                                        l.Change.Action = "Upload";
                                        l.Change.Success = "hideprogressUser_New();";
                                    })
                                    .Listeners(l => l.Change.Fn = "showFile"),
                                X.Container()
                                    .Content(@<div id="fi-button-msg" style="width: 360px; text-align:right;"><b>فایل انتخاب شده:</b></div>),
                               X.Panel()
                                    .Border(false)
                                     .Layout(LayoutType.VBox)
                                    .LayoutConfig(new VBoxLayoutConfig { Align=VBoxAlign.Center})
                                    .Items(
                                        X.Label("پیش نمایش"),
                                        X.Panel()
                                            .Frame(true)
                                            .MarginSpec("5px 0 0 0")
                                            .Layout(LayoutType.Fit)
                                            .Items(
                                        X.Image()
                                            .ItemID("Image")
                                            .Flex(1)
                                            .ImageUrl("/Content/Blank.jpg")
                                            .Width(100)
                                            .Height(120)
                                            //.PaddingSpec("0 0 15px 0")
                                            .Border(true)
                                            .Frame(true)))
                            )
                            
                            
                )/*پنل کلی*/
        )
        )
)
<script type="text/javascript">
    var numberload=0;
    var NodeId = 0;
    var MojazUser_New = 0;
    var sizeeUser_New = 0;
    var EndUploadUser_New = false;
    var GroupS = "";

    var onInitializeToEn = function () {
        var tt = App.NewUser_New.queryById('txtMail');
        changeLagToEn(tt);
    };

    var onInitializeToFNName = function () {
        var tt = App.NewUser_New.queryById('txtName');
        changeLagToFa(tt);
    };
    var onInitializeToFNFamily = function () {
        var tt = App.NewUser_New.queryById('txtFamily');
        changeLagToFa(tt);
    };
    var CheckUser_New = setInterval(CheckEndUser_New, 500);
    /*setTimeout("LoadUser_New()", 1000);*/
    var nodeLoadGroup = function (store, operation, options) {
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/NewVer/User_New/NodeLoadGroup',
            params: {
                nod: node.getId(),
                UserId: '@ViewBag.Id'
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand();
            },

            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });

        return false;
    };
    function GetGroupId(record) {
        NodeId = record.getId();
    };


    var nodeLoadTreeCountryU = function (store, operation, options) {
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/NewVer/User_New/nodeLoadTreeCountry',
            params: {
                nod: node.getId()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand();
                /*if (node.getId() == "1") {
                    SetDefault1();
                }*/
            },
            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });

        return false;
    };

    function SetDefault1() {
        App.TreeCountryD.getSelectionModel().select(1);
    }

    function GetTreeCountryIdU(record) {
        var pathCountry = record.getPath("text");
        var TextCountry = pathCountry.split('/').splice(1).join("-->");
        App.NewUser_New.queryById('countryId').setValue(record.getId());
        App.NewUser_New.queryById('countrySID').setValue(record.data.cls);
        App.NewUser_New.queryById('countryNType').setValue(record.data.dataPath);
        if (record.getId() != 0) {
            App.NewUser_New.queryById('lblTitleCountry').setText(TextCountry);
        }
        else {
            App.NewUser_New.queryById('lblTitleCountry').setText("");
        }
    };

    function CheckEndUser_New() {
        if (EndUploadUser_New == true) {
            Ext.net.DirectMethod.request({
                url: '/NewVer/User_New/ShowPic',
                success: function (data) {
                    value = "data:image/gif;base64," + data.image;
                    App.NewUser_New.queryById('Image').setImageUrl(value);
                }
            });

            Ext.MessageBox.hide();
            Ext.Msg.alert('عملیات موفق', 'فایل با موفقیت آپلود شد.');
            clearInterval(CheckEndUser_New);
            EndUploadUser_New = false;
        }
    }
    var showFile = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        var el = Ext.get('fi-button-msg');
        if (v) {
            showProgressBarUser_New();
            if (v.split('.').pop().toLowerCase() == "jpg" || v.split('.').pop().toLowerCase() == "png") {
                MojazUser_New = 1;
                if (document.getElementById(id).files[0].size <= 102400) {
                    sizeeUser_New = 1;
                }
                if (sizeeUser_New == 1) {
                    el.update('<b>فایل انتخاب شده:</b> ' + v);
                }
                else {
                    el.update('<b>فایل انتخاب شده:</b> ');
                }

                if (!el.isVisible()) {
                    el.slideIn('t', {
                        duration: .2,
                        easing: 'easeIn',
                        callback: function () {
                            el.highlight();
                        }
                    });
                } else {
                    el.highlight();
                }
            }
            else {
                el.update('<b>فایل انتخاب شده:</b> ');
            }
        }
    };

    function hideprogressUser_New() {
        if (MojazUser_New == 1 && sizeeUser_New == 1) {
            EndUploadUser_New = true;
        }
        MojazUser_New = 0;
        sizeeUser_New = 0;
    }

    function showProgressBarUser_New() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }
    function ChangeType() {
        if (App.NewUser_New.queryById('cboUserType').getValue() == "1") {
            App.NewUser_New.queryById('txtFamily').hide();
            App.NewUser_New.queryById('lblFamily').hide();
        }
        else {
            App.NewUser_New.queryById('txtFamily').show();
            App.NewUser_New.queryById('lblFamily').show();
        }
    }
    function LoadUser_New () {
        numberload = numberload + 1;
        if (numberload > 1)
            return;
        if ('@ViewBag.Id' != '0') {
            App.NewUser_New.body.mask("در حال بارگذاری...");
            Ext.net.DirectMethod.request({
                url: '/NewVer/User_New/Details',
                params: {
                    Id: '@ViewBag.Id'
                },
                success: function (data) {
                    if (data.Er == 0) {
                        App.NewUser_New.queryById('txtUser').hide();
                        App.NewUser_New.queryById('txtPassword').hide();
                        App.NewUser_New.queryById('lblUser').hide();
                        App.NewUser_New.queryById('lblPassword').hide();
                        var cboUserType = App.NewUser_New.queryById('cboUserType');
                        cboUserType.setValue(data.fldUserType);
                        var txtName = App.NewUser_New.queryById('txtName');
                        txtName.setValue(data.fldName);
                        var txtFamily = App.NewUser_New.queryById('txtFamily');
                        txtFamily.setValue(data.fldFamily);
                        if (data.fldUserType == "1") {
                            txtFamily.hide();
                            App.NewUser_New.queryById('lblFamily').hide();
                        }
                        var txtMeliCode = App.NewUser_New.queryById('txtMeliCode');
                        txtMeliCode.setValue(data.fldMelliCode);
                        var cboStatus = App.NewUser_New.queryById('cboStatus');
                        cboStatus.setValue(data.fldStatus);
                        var txtMail = App.NewUser_New.queryById('txtMail');
                        txtMail.setValue(data.fldEmail);
                        var txtSDate = App.NewUser_New.queryById('txtSDate');
                        txtSDate.setRawValue(data.fldSDate);
                        var txtCell = App.NewUser_New.queryById('txtCell');
                        txtCell.setRawValue(data.fldMobile);
                        var txtTel = App.NewUser_New.queryById('txtTel');
                        txtTel.setRawValue(data.fldTel);
                        var txtCodeT = App.NewUser_New.queryById('txtCodeT');
                        txtCodeT.setValue(data.fldNumberAgoTel);
                        var txtDesc = App.NewUser_New.queryById('txtDesc');
                        txtDesc.setValue(data.fldDesc);
                        var txtCode = App.NewUser_New.queryById('txtCode');
                        txtCode.setValue(data.fldOfficeUserKey);
                        var fldId = App.NewUser_New.queryById('fldId');
                        fldId.setValue(data.fldID);
                        GroupS = data.checkedNodes;
                        App.NewUser_New.queryById('countryId').setValue(data.countryId);
                        App.NewUser_New.queryById('countrySID').setValue(data.fldCode);
                        App.NewUser_New.queryById('countryNType').setValue(data.fldType);
                        value = "data:image/gif;base64," + data.image;
                        App.NewUser_New.queryById('Image').setImageUrl(value);

                        if (data.Path == "/1") {
                            if (App.TreeCountryD.store.getNodeById(1) != undefined) {
                                App.TreeCountryD.getSelectionModel().select(1);
                            }
                        }
                        else {
                            var jj = 0;
                            if (App.TreeCountryD.store.getNodeById(1) != undefined) {
                                jj = 1;
                            }
                            Ext.net.DirectMethod.request({
                                url: '/NewVer/User_New/LoadPath',
                                params: {
                                    Path: data.Path,
                                    jj: jj,
                                    treeid: data.treeid
                                },
                                success: function (result) {
                                    if (result.length != 0) {
                                        if (App.TreeCountryD.store.getNodeById(1) != undefined) {
                                            var idd = data.Path.split('/')[1];
                                            App.TreeCountryD.store.getNodeById(idd).appendChild(result);
                                            /*var nodee = App.TreeCountryD.store.getNodeById(data.Path.split('/')[data.Path.split('/').length-1]);*/
                                            App.TreeCountryD.expandPath("/0" + data.Path);
                                            App.TreeCountryD.selectPath("/0" + data.Path);
                                        }
                                        else {
                                            /*var idd = data.Path.split('/')[2];*/
                                            App.TreeCountryD.store.getNodeById(data.treeid).appendChild(result);
                                            var ind = data.Path.indexOf(data.treeid);
                                            var pathh = data.Path.substring(ind);
                                            /*var nodee = App.TreeCountryD.store.getNodeById(pathh.split('/')[pathh.split('/').length - 1]);*/
                                            App.TreeCountryD.expandPath("/0/" + pathh);
                                            App.TreeCountryD.selectPath("/0/" + pathh);
                                        }
                                    }
                                    else {
                                        App.TreeCountryD.getSelectionModel().select(App.TreeCountryD.getStore().getNodeById(data.countryId));
                                    }
                                },
                                failure: function (errorMsg) {
                                    Ext.Msg.alert('Failure', errorMsg);
                                }
                            });
                        }

                    }
                    else if (data.Er == 1) {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                    App.NewUser_New.body.mask().hide();
                }
            });
        }
        else {
            App.NewUser_New.queryById('txtName').validate();
            App.NewUser_New.queryById('txtUser').validate();
            App.NewUser_New.queryById('txtPassword').validate();
            App.NewUser_New.queryById('txtSDate').validate();
            App.NewUser_New.queryById('txtFamily').validate();
            App.NewUser_New.queryById('txtCodeT').validate();
            App.NewUser_New.queryById('txtMeliCode').validate();
            App.NewUser_New.queryById('txtMail').validate();
            App.NewUser_New.queryById('txtSDate').validate();
            App.NewUser_New.queryById('txtTel').validate();
            App.NewUser_New.queryById('txtCell').validate();
            SetDefault1();
        }
    }

    function SaveUser_New() {
        var txtName = App.NewUser_New.queryById('txtName');
        var txtPassword = App.NewUser_New.queryById('txtPassword');
        var txtUser = App.NewUser_New.queryById('txtUser');
        var txtFamily = App.NewUser_New.queryById('txtFamily');
        var txtMeliCode = App.NewUser_New.queryById('txtMeliCode');
        var cboStatus = App.NewUser_New.queryById('cboStatus');
        var cboUserType = App.NewUser_New.queryById('cboUserType');
        var txtMail = App.NewUser_New.queryById('txtMail');
        var txtSDate = App.NewUser_New.queryById('txtSDate');
        var txtCell = App.NewUser_New.queryById('txtCell');
        var txtTel = App.NewUser_New.queryById('txtTel');
        var txtCodeT = App.NewUser_New.queryById('txtCodeT');
        var txtCode = App.NewUser_New.queryById('txtCode');
        var txtDesc = App.NewUser_New.queryById('txtDesc');
        var Id = App.NewUser_New.queryById('fldId');
        var er = false;
        var UserGroup = new Array();
        var Group = App.TreeGroup;
        var Checked = Group.getChecked();
        var GroupId;
        for (var i = 0; i < Checked.length ; i++) {
            GroupId = Checked[i];
            UserGroup.push({
                'fldUserGroupId': GroupId.getId()
            });
        }
        if (txtName.validate() == false) {
            er = true;
        }
        if (txtSDate.validate() == false) {
            er = true;
        }
        /*if (txtFamily.validate() == false) {
            er = true;
        }*/
        if (txtCodeT.validate() == false) {
            er = true;
        }

        if (txtMeliCode.validate() == false) {
            er = true;
        }
        if (txtMail.validate() == false) {
            er = true;
        }
        if (txtCell.validate() == false) {
            er = true;
        }
        if (Id.getValue() == 0) {
            if (txtUser.validate() == false) {
                er = true;
            }
            if (txtPassword.validate() == false) {
                er = true;
            }
        }
        if (txtTel.validate() == false) {
            er = true;
        }
        var status = false;
        if (cboStatus.getValue() == "1")
            status = true;
        var usertype = false;
        if (cboUserType.getValue() == "1")
            usertype = true;
        if (Checked == "") {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا گروه کاربری را انتخاب کنید. ",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            er = true;
        }
        if (App.NewUser_New.queryById('countryId').getValue() == 0 || App.NewUser_New.queryById('countryId').getValue() == "") {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا موقعیت کاربر را انتخاب نمایید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            er = true;
        }

        if (er == true)
            return;
        App.NewUser_New.body.mask("در حال ذخیره سازی...");
        var data = {
            UserGroup: UserGroup,
            fldName: txtName.getRawValue(),
            fldFamily: txtFamily.getRawValue(),
            fldStatus: status,
            fldPassword: txtPassword.getValue(),
            fldUserName: txtUser.getValue(),
            fldMelliCode: txtMeliCode.getValue(),
            fldEmail: txtMail.getRawValue(),
            fldNumberAgoTel: txtCodeT.getValue(),
            fldTel: txtTel.getValue(),
            fldMobile: txtCell.getValue(),
            fldStartDate: txtSDate.rawValue,
            CountryCode: App.NewUser_New.queryById('countrySID').getValue(),
            CountryType: App.NewUser_New.queryById('countryNType').getValue(),
            fldId: Id.getValue(),
            fldDesc: txtDesc.getValue(),
            fldOfficeUserKey: txtCode.getValue(),
            fldUserType: usertype
        };

        $.ajax({
            type: "POST",
            url: '/NewVer/User_New/Save',
            datatype: "json",
            data: JSON.stringify(data),
            contentType: 'application/json',
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    Name: data.MsgName,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                App.NewUser_New.body.mask().hide();
                App.User_New.queryById('GridUser_New').store.load();
                if (data.Er != 1)
                    ClearUser_New();
            },
            failure: function (data) {
                alert(data.data);
            }
        });



    }
    function ClearUser_New() {
        App.NewUser_New.queryById('txtName').setValue("");
        App.NewUser_New.queryById('txtFamily').setValue("");
        App.NewUser_New.queryById('txtMeliCode').setValue("");
        App.NewUser_New.queryById('txtMail').setValue("");
        App.NewUser_New.queryById('txtSDate').setValue("");
        App.NewUser_New.queryById('txtCell').setValue("");
        App.NewUser_New.queryById('txtTel').setValue("");
        App.NewUser_New.queryById('txtCodeT').setValue("");
        App.NewUser_New.queryById('txtCode').setValue("");
        App.NewUser_New.queryById('txtDesc').setValue("");
        App.NewUser_New.queryById('fldId').setValue(0);
        App.TreeCountryD.getSelectionModel().select(1);
        App.NewUser_New.queryById('countryId').setValue(0);
        App.NewUser_New.queryById('countrySID').setValue(0);
        App.NewUser_New.queryById('countryNType').setValue(0);
        App.NewUser_New.queryById('fldId').setValue(0);
        var el = Ext.get('fi-button-msg');
        el.update('<b>فایل انتخاب شده:</b> ');
        App.NewUser_New.queryById('Image').setImageUrl("/Content/Blank.jpg");
    }
    /* function EnterNext() {
         var keyfield = App.NewUser_New.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
         var nextfld = keyfield.nextSibling();
         nextfld.focus();
         nextfld.selectText();

     }*/
</script>