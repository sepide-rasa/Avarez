@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

<style>
    .LblStyle {
        height: auto;
    }

    .LblRed {
        color: red;
    }
    
</style>

@(Html.X().Window().Modal(true)
.Width(1110)
.Resizable(false)
    .Title("تنظیمات فرعی")
         .ID("NewSubSetting_New")
        .Closable(true).ButtonAlign(Ext.Net.Alignment.Center)
    .CloseAction(Ext.Net.CloseAction.Destroy)
        .Layout(LayoutType.Fit)
                   .Buttons(X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk)//.ToolTip("کلید میانبر F8")
                               .Listeners(l =>
                               {
                                   l.Click.Handler = "SaveSubSetting_New();";

                               })
                               .ItemID("btnSave")
                                ,
                                X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut)//.ToolTip("کلید میانبر Esc")
                                       .OnClientClick("App.NewSubSetting_New.destroy()"))
    .Items(
        X.FormPanel()
        .Border(false)
        //.Margin(5)
            .DefaultButton("btn")
        .TitleAlign(Ext.Net.TitleAlign.Center)
           .Layout(LayoutType.Fit)
                .Items(

                X.Panel().Border(false).PaddingSpec("5px 0 10px 0")
                    .Layout(Ext.Net.LayoutType.VBox)
                    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
            X.Panel().Layout(LayoutType.HBox).Border(false)
                .LayoutConfig(new Ext.Net.HBoxLayoutConfig { Align = HBoxAlign.Middle })
                  .Defaults(new { Margin = 5 })
            .Items(
                 X.FieldSet()
                .Border(true)
                    .Width(695)
                .Defaults(new { Margin = 5 })
                .Title("مشخصات")
               .LayoutConfig(new TableLayoutConfig { Columns = 4 })
                .Items(
                X.Hidden().ItemID("fldId"),
                X.Hidden().ItemID("countryId"),
                X.Hidden().ItemID("countrySID"),
                X.Hidden().ItemID("countryNType"),
                X.Hidden().ItemID("CarId"),
                X.Hidden().ItemID("CarSID"),
                X.Hidden().ItemID("CarNType"),
            X.Label("نحوه گرد کردن:"),
         X.ComboBox()
            .ItemID("cboRound")
        .LabelAlign(Ext.Net.LabelAlign.Top)
        .Editable(false)
        .TypeAhead(true)
        .QueryMode(DataLoadMode.Local)
        .ForceSelection(true)
        .TriggerAction(TriggerAction.All)
        .DisplayField("Name")
        .ValueField("ID")
        .EmptyText("تعداد ارقام اعشار...")
        .Width(190)
        .Store(X.Store()
            //.Listeners(li => li.Load.Handler = "LoadSubSetting_New();")
        .Model(X.Model()
            .IDProperty("ID")
                .Fields(
                            new ModelField("ID", ModelFieldType.String) { Mapping = "fldID" },
                            new ModelField("Name", ModelFieldType.String) { Mapping = "fldName" }
                )
            )
            .Proxy(X.AjaxProxy()
                .Url(Url.Action("GetCascadeRound"))
                .Reader(X.JsonReader().Root("data"))
            )
       
    )
        .AllowBlank(false)
        .MsgTarget(Ext.Net.MessageTarget.Side)
        .BlankText("لطفا نحوه گرد کردن اعشار را انتخاب نمایید."),
            X.Label("جستجوی پیش فرض:"),
             X.ComboBox()
                .ItemID("cboSearch")
            .LabelAlign(Ext.Net.LabelAlign.Top)
            .Editable(false)
            .TypeAhead(true)
            .QueryMode(DataLoadMode.Local)
            .ForceSelection(true)
            .TriggerAction(TriggerAction.All)
            .DisplayField("Name")
            .ValueField("ID")
            .EmptyText("جستجوی پیش فرض...")
            .Width(190)
               .Items(
                        new ListItem("VIN", "0"),
                        new ListItem("ش موتور و شاسی", "1"),
                        new ListItem("ش موتور", "2"),
                        new ListItem("ش شاسی","3"),
                        new ListItem("نام مالک", "4"),
                        new ListItem("کد ملی", "5"),
                        new ListItem("پلاک", "6")
                                    
                    )
            .SelectedItems(new { Value = "1" })
            .AllowBlank(false)
            .MsgTarget(Ext.Net.MessageTarget.Side)
            .BlankText("لطفا جستجوی پیش فرض را انتخاب نمایید."),
                X.Label("سریال پلاک:"),
             X.ComboBox()
                .ItemID("cboSerialP")
            .LabelAlign(Ext.Net.LabelAlign.Top)
            .Editable(false)
            .TypeAhead(true)
            .QueryMode(DataLoadMode.Local)
            .ForceSelection(true)
            .TriggerAction(TriggerAction.All)
            .DisplayField("Name")
            .ValueField("ID")
            .EmptyText("سریال پلاک...")
            .Width(190)
            .Store(X.Store()
               .AutoLoad(true)  
            .Model(X.Model()
                .IDProperty("ID")
                    .Fields(
                                new ModelField("ID", ModelFieldType.String) { Mapping = "fldID" },
                                new ModelField("Name", ModelFieldType.String) { Mapping = "fldName" }
                    )
                )
                .Proxy(X.AjaxProxy()
                    .Url(Url.Action("GetCascadecboSerialP"))
                    .Reader(X.JsonReader().Root("data"))
                )
        )
            //.AllowBlank(false)
            .MsgTarget(Ext.Net.MessageTarget.Side)
            //.BlankText("لطفا سریال پلاک را انتخاب نمایید."),
             ,X.Label("کاراکتر وسط پلاک:"),
                 X.ComboBox()
                    .ItemID("cboCharP")
                .LabelAlign(Ext.Net.LabelAlign.Top)
                .Editable(false)
                .TypeAhead(true)
                .QueryMode(DataLoadMode.Local)
                .ForceSelection(true)
                .TriggerAction(TriggerAction.All)
                .DisplayField("Name")
                .ValueField("ID")
                    .EmptyText("کاراکتر وسط پلاک...")
                .Width(190)
                .Store(X.Store()
                            .AutoLoad(true)//.Listeners(li => li.Load.Handler = "LoadSubSetting_New();")
                .Model(X.Model()
                    .IDProperty("ID")
                        .Fields(
                                    new ModelField("ID", ModelFieldType.String) { Mapping = "fldID" },
                                    new ModelField("Name", ModelFieldType.String) { Mapping = "fldName" }
                        )
                    )
                    .Proxy(X.AjaxProxy()
                            .Url(Url.Action("GetCascadeChar"))
                        .Reader(X.JsonReader().Root("data"))
                    )
            )
                //.AllowBlank(false)
                .MsgTarget(Ext.Net.MessageTarget.Side)
                    //.BlankText("لطفا کاراکتر وسط پلاک را انتخاب نمایید."),
             ,X.Label("کد شروع شناسه قبض:"),
                     X.TextField()
                     .ItemID("txtStart")
                    .MaxLength(3)
                    .EnforceMaxLength(true)
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .Width(190)
                    .BlankText("لطفا کد شروع شناسه قبض را وارد نمایید.")
                    .MaskRe("/[0-9]/")
                    .Listeners(l => l.Change.Handler = "ChangetxtStart()")
                    //.AutoFocus(true)
                    ,X.Label("عنوان کاربر در گزارشات:"),
                     X.TextField()
                     .ItemID("txtTitle")
                    .MaxLength(100)
                    .EnforceMaxLength(true)
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .Width(190)
                    .BlankText("لطفا عنوان کاربر در گزارشات را وارد نمایید."),
                        //.MaskRe("/[0-9]/"),
                    X.Label("آخرین مهلت پرداخت:"),
                    X.TextField()
                    .ItemID("txtLast")
                    .MaxLength(10)
                    .EnforceMaxLength(true)
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .Width(190)
                    .BlankText("لطفا آخرین مهلت پرداخت را وارد نمایید.")
                    .MaskRe("/[0-9]/"),
                      X.Label()
                        .Text("تاریخ پیاده سازی:"),
                    X.PDateField()
                        .ItemID("txtDate")
                        .Width(190)
                        .MsgTarget(Ext.Net.MessageTarget.Side)
                        .AllowBlank(false)
                        .MaskRe("/[0-9,/]/")
                        .Editable(true)
                        .BlankText("لطفا تاریخ پیاده سازی را وارد نمایید.")
                        .LabelAlign(Ext.Net.LabelAlign.Top),
                    X.Label()
                        .Text("پرداخت پس از تایید سابقه:"),
                    X.Checkbox()                    
                        .ItemID("taeedSavabegh")
                  )
                        ,
                    X.FieldSet()
                        .Border(true)
                        .Layout(LayoutType.VBox)
                        .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Right })
                        .Title("فیلتر محاسبات")
                            .Width(385)
                        .Items(
                       X.FieldSet()
                       .Width(360)
                        .Border(false)
                        .Layout(LayoutType.HBox)
                        .Items(
                            X.Checkbox()
                                .ItemID("chPrint")
                            .LabelAlign(Ext.Net.LabelAlign.Left)
                                .PaddingSpec("0 0 0 3px")
                            .LabelSeparator("")
                                , X.Label("چاپ شناسه قبض و پرداخت")
                            , X.Checkbox()
                                .ItemID("chExempt")
                                .PaddingSpec("0 25px 0 3px")
                             .LabelAlign(Ext.Net.LabelAlign.Left)
                           // .LabelSeparator("")
                                , X.Label("معاف برای خودروهای صفر")
                                )
                            , X.FieldSet()
                        .Border(false)
                        .Layout(LayoutType.HBox)

                        //.Width(250)
                        .Items(
                        X.Checkbox()
                                .ItemID("chSeri")
                             .LabelAlign(Ext.Net.LabelAlign.Left)
                            .PaddingSpec("0 0 0 3px")
                            .LabelSeparator(""),
                                X.Label(" اعمال سری خودرو"),
                             X.Checkbox()
                                .ItemID("chApply")
                             .LabelAlign(Ext.Net.LabelAlign.Left)
                                 .PaddingSpec("0 72px 0 3px")
                            .LabelSeparator(""),
                                X.Label("اعمال تقسیمات کشوری")
                            )
                              , X.FieldSet()
                        .Border(false)
                        .Layout(LayoutType.HBox)
                        .Width(340)
                        .Items(
                                X.Checkbox()
                                .ItemID("chCalc")
                            .LabelAlign(Ext.Net.LabelAlign.Left)
                            .PaddingSpec("0 0 0 3px")
                            .LabelSeparator("")
                            .Listeners(l=>l.Change.Handler="ChangeCalcDate()")
                            , X.Label(" محاسبه از تاريخ آخرين واريزي"),
                            //X.Label()
                            //.Text("تاریخ پیاده سازی:"),
                            X.PDateField()
                            .ItemID("txtCalcDate")
                            .Width(130)
                            .MsgTarget(Ext.Net.MessageTarget.Side)
                            .AllowBlank(false)
                            .MaskRe("/[0-9,/]/")
                            .PaddingSpec("0 20px 0 3px")
                            .Editable(true)
                            .BlankText("لطفا تاریخ را وارد نمایید.")
                            .LabelAlign(Ext.Net.LabelAlign.Top)     
                        )
                                 , X.FieldSet()
                            .Border(false)
                            .Layout(LayoutType.HBox)
                            //.Width(200)
                            .Items(
                                X.Checkbox()
                                .ItemID("chHaveScan")
                                .LabelAlign(Ext.Net.LabelAlign.Left)
                                .PaddingSpec("0 0 0 3px")
                                .LabelSeparator("")
                                , X.Label("اجباری بودن اسکن مدارک ")
                                    , X.Checkbox()
                                    .ItemID("chExpScan")
                                    .LabelAlign(Ext.Net.LabelAlign.Left)
                                    .PaddingSpec("0 0 0 3px")
                                    .LabelSeparator("")
                                    , X.Label("اجباری بودن اسکن سوابق ")
                            ),
                            X.FieldSet()
                            .Border(false)
                            .Layout(LayoutType.HBox)
                            .Width(200)
                            .Items(
                               
                                    X.Checkbox()
                                    .ItemID("chMobileVerify")
                                    .LabelAlign(Ext.Net.LabelAlign.Left)
                                    .PaddingSpec("0 0 0 3px")
                                    .LabelSeparator("")
                                    , X.Label("ارسال کد جهت تایید موبایل")
                            )

                        )
                        ),
                              X.Panel().Layout(LayoutType.HBox).Border(false).Defaults(new { Margin = 5 })
            .Items(
                        X.FieldSet()
                    .Border(true)
                    .Title("موقعیت در تقسیمات کشوری")
                    .Width(400)
                    .Height(350)
                    .Layout(LayoutType.Column)
                    .Defaults(new { Margin = 2 })
                    .Items(
                              X.TreePanel()
                                .ID("TreeCountrySM")
                                .AutoScroll(true)
                                .Width(380)
                                .ColSpan(2)
                                .Expand(true)
                                .Height(250)
                                .Expand(true)
                                .UseArrows(true)
                                .Border(false)
                                .Listeners(a =>
                                    {
                                        a.Select.Handler = "GetTreeCountryIdSM(record);";
                                        a.AfterRender.Handler = "this.getRootNode().expand();";
                                    })
                                .Root(Html.X().Node().NodeID("1").DataPath("0").Cls("0").Text("جمهوری اسلامی ایران").IconFile("/Content/images/0.png"))
                                .Listeners(l =>
                                {
                                    l.BeforeLoad.Fn = "nodeLoadTreeCountrySM";
                                })
                                , X.Label()
                                .Cls("LblRed")
                                .Text("مورد انتخاب شده: ")
                                , X.Label()

                                .Cls("LblStyle")
                                .ItemID("lblTitleCountry")
                                ),
                                    X.FieldSet()
                        .Border(true)
                        .Title("سلسله مراتب خودرو")
                        .Width(400)
                        .Height(350)
                        .Layout(LayoutType.Column)
                        .Defaults(new { Margin = 2 })
                        .Items(
                                  X.TreePanel()
                                    .ID("TreeCarSM")
                                    .AutoScroll(true)
                                    .Width(380)
                                    .ColSpan(2)
                                    .Expand(true)
                                    .Height(250)
                                    .Expand(true)
                                    .UseArrows(true)
                                    .Border(false)
                                    .Listeners(a =>
                                        {
                                            a.Select.Handler = "GetTreeCarIdSM(record);";
                                            a.AfterRender.Handler = "this.getRootNode().expand();";
                                        })
                                    .Root(Html.X().Node().NodeID("1").DataPath("0").Cls("0").Text("وسیله نقلیه").IconFile("/Content/images/c0.png"))
                                    .Listeners(l =>
                                    {
                                        l.BeforeLoad.Fn = "nodeLoadTreeCarSM";
                                    })
                                    , X.Label()
                                    .Cls("LblRed")
                                    .Text("مورد انتخاب شده: ")
                                    , X.Label()
                                    .Cls("LblStyle")
                                    .ItemID("lblTitleCar")
                                    )
                                    )
                                    )

            )
        )
)
@(Html.X().KeyMap()
                 .ID("NewSubSetting_NewMap")
                 .Target("={App.NewSubSetting_New.getTargetEl()}")
            .Binding(b =>
            {
                b.Add(Html.X().KeyBinding()
                .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                .Handler("SaveSubSetting_New(); ")
                );

            }))
<script type="text/javascript">
    setTimeout("LoadSubSetting_New()", 900);
    var nodeLoadTreeCountrySM = function (store, operation, options) {
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/NewVer/SubSetting_New/NodeLoadTreeCountry',
            params: {
                nod: node.getId()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand();
            },

            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });

        return false;
    };

    function GetTreeCountryIdSM(record) {
        var path = record.getPath("text");
        var Text = path.split('/').splice(1).join("-->");
        App.NewSubSetting_New.queryById("countryId").setValue(record.getId());
        App.NewSubSetting_New.queryById("countrySID").setValue(record.data.cls);
        App.NewSubSetting_New.queryById("countryNType").setValue(record.data.dataPath);
        if (App.NewSubSetting_New.queryById("countryNType").getValue() < 5) {
            App.NewSubSetting_New.queryById("countryNType").setValue(-1);
            App.NewSubSetting_New.queryById('lblTitleCountry').setText("شما مجاز به انتخاب موقعیت در تقسیمات کشوری انتخاب شده نیستید.");
            return;
        }
        else {
            App.NewSubSetting_New.queryById('lblTitleCountry').setText(Text);
        }
    };

    var nodeLoadTreeCarSM = function (store, operation, options) {
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/NewVer/SubSetting_New/NodeLoadTreeCar',
            params: {
                nod: node.getId()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand();
            },

            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });

        return false;
    };

    function SetDefault1() {
        App.TreeCountrySM.getSelectionModel().select(0);
    }

    function SetDefault() {
        App.TreeCarSM.getSelectionModel().select(0);
    }

    function GetTreeCarIdSM(record) {
        var path = record.getPath("text");
        var Text = path.split('/').splice(1).join("-->");
        App.NewSubSetting_New.queryById("CarId").setValue(record.getId());
        App.NewSubSetting_New.queryById("CarSID").setValue(record.data.cls);
        App.NewSubSetting_New.queryById("CarNType").setValue(record.data.dataPath);
        App.NewSubSetting_New.queryById('lblTitleCar').setText(Text);
    };

    function ChangetxtStart() {
        var txtStart = App.NewSubSetting_New.queryById('txtStart');
        if (txtStart.getValue() >= 256)
        {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "مقدار وارد شده بیشتر از حد مجاز است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            txtStart.setValue("");
        }

    }
    function LoadSubSetting_New() {
        ChangeCalcDate();
        if ('@ViewBag.Id' != '0') {
            App.NewSubSetting_New.body.mask("در حال بارگذاری...");
            Ext.net.DirectMethod.request({
                url: '/NewVer/SubSetting_New/Details',
                params: {
                    Id: '@ViewBag.Id'
                },
                success: function (data) {
                    if (data.Er == 0) {
                        var txtStart = App.NewSubSetting_New.queryById('txtStart');
                        txtStart.setValue(data.fldStartCodeBillIdentity);
                        var cboRound = App.NewSubSetting_New.queryById('cboRound');
                        cboRound.setValue(data.fldRoundID);
                        var txtDate = App.NewSubSetting_New.queryById('txtDate');
                        txtDate.setValue(data.fldImplementationDate);
                        var chExempt = App.NewSubSetting_New.queryById('chExempt');
                        chExempt.setValue(data.fldExemptNewProduction);
                        var chPrint = App.NewSubSetting_New.queryById('chPrint');
                        chPrint.setValue(data.fldPrintBill_Payment);
                        var chHaveScan = App.NewSubSetting_New.queryById('chHaveScan');
                        chHaveScan.setValue(data.fldHaveScan);
                        var chExpScan = App.NewSubSetting_New.queryById('chExpScan');
                        chExpScan.setValue(data.fldExpScan);
                        var chMobileVerify = App.NewSubSetting_New.queryById('chMobileVerify');
                        chMobileVerify.setValue(data.fldMobileVerify);
                        var chApply = App.NewSubSetting_New.queryById('chApply');
                        chApply.setValue(data.fldCountryDivisionsTreeApply);
                        var chSeri = App.NewSubSetting_New.queryById('chSeri');
                        chSeri.setValue(data.fldCarSeriesTreeApply);
                        var txtCalcDate = App.NewSubSetting_New.queryById('txtCalcDate');
                        txtCalcDate.setValue(data.fldAzAkharinTarikh);
                        var cboSerialP = App.NewSubSetting_New.queryById('cboSerialP');
                        cboSerialP.setValue(data.fldDefaultPelakSerial);
                        var cboCharP = App.NewSubSetting_New.queryById('cboCharP');
                        cboCharP.setValue(data.fldDefaultPelakChar);
                        var cboSearch = App.NewSubSetting_New.queryById('cboSearch');
                        cboSearch.setValue(data.fldDefaultSearch);
                        var txtTitle = App.NewSubSetting_New.queryById('txtTitle');
                        txtTitle.setValue(data.fldTitleUserReport);
                        var txtLast = App.NewSubSetting_New.queryById('txtLast');
                        txtLast.setValue(data.fldLastRespitePayment);
                        var chCalc = App.NewSubSetting_New.queryById('chCalc');
                        chCalc.setValue(data.fldCalcFromVariz); 
                        var taeedSavabegh = App.NewSubSetting_New.queryById('taeedSavabegh');
                        taeedSavabegh.setValue(data.fldTaeedSavabegh);
                        var Id = App.NewSubSetting_New.queryById('fldId');
                        Id.setValue(data.fldId);
                        App.NewSubSetting_New.queryById("countryId").setValue(data.CountryId);
                        App.NewSubSetting_New.queryById("countrySID").setValue(data.countryCode);
                        App.NewSubSetting_New.queryById("countryNType").setValue(data.CountryType);
                        App.NewSubSetting_New.queryById("CarId").setValue(data.CarId);
                        App.NewSubSetting_New.queryById("CarSID").setValue(data.carCode);
                        App.NewSubSetting_New.queryById("CarNType").setValue(data.carType);

                        if (data.Path == "/1") {
                            App.TreeCountrySM.getSelectionModel().select(0);
                        }
                        else {
                            Ext.net.DirectMethod.request({
                                url: '/NewVer/SubSetting_New/LoadPath',
                                params: {
                                    Path: data.Path
                                },
                                success: function (result) {
                                    if (result.length != 0) {
                                        App.TreeCountrySM.store.getNodeById(data.Path.split('/')[2]).appendChild(result);
                                        var nodee = App.TreeCountrySM.store.getNodeById(data.Path.split('/')[data.Path.split('/').length - 1]);
                                        App.TreeCountrySM.expandPath(data.Path);
                                        App.TreeCountrySM.selectPath(data.Path);
                                    }
                                    else {
                                        App.TreeCountrySM.selectPath(data.Path);
                                    }
                                },
                                failure: function (errorMsg) {
                                    Ext.Msg.alert('Failure', errorMsg);
                                }
                            });
                        }
                        Ext.net.DirectMethod.request({
                            url: '/NewVer/Discount_New/LoadPathCar',
                            params: {
                                Path: data.CarPath
                            },
                            success: function (result) {
                                if (result.length != 0) {
                                    App.TreeCarSM.store.getNodeById(data.CarPath.split('/')[2]).appendChild(result);
                                    var nodeeC = App.TreeCarSM.store.getNodeById(data.CarPath.split('/')[data.CarPath.split('/').length - 1]);
                                    App.TreeCarSM.expandPath(data.CarPath);
                                    App.TreeCarSM.selectPath(data.CarPath);
                                }
                                else {
                                    App.TreeCarSM.selectPath(data.CarPath);
                                }
                            },
                            failure: function (errorMsg) {
                                Ext.Msg.alert('Failure', errorMsg);
                            }
                        });
                      
                    }
                    else if (data.Er == 1) {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                    App.NewSubSetting_New.body.mask().hide();
                }
            });
        }
        else {
            App.NewSubSetting_New.queryById('cboRound').validate();
            App.NewSubSetting_New.queryById('txtStart').validate();
            App.NewSubSetting_New.queryById('txtTitle').validate();
            App.NewSubSetting_New.queryById('txtLast').validate();
            App.NewSubSetting_New.queryById('txtDate').validate();           
            SetDefault();
            /*SetDefault1();*/
        }

    }
    function ChangeCalcDate() {
        var chCalc = App.NewSubSetting_New.queryById('chCalc');
        var txtCalcDate = App.NewSubSetting_New.queryById('txtCalcDate');
        if (chCalc.getValue() == true) {
            txtCalcDate.show();
            txtCalcDate.validate();
        }
        else
            txtCalcDate.hide();
    }
    function SaveSubSetting_New() {
        if (App.TreeCountrySM.getSelectionModel().getLastSelected() == undefined)
        {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا شهرداری مورد نظر را از قسمت تقسیمات کشوری انتخاب نمایید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }
        else if (App.NewSubSetting_New.queryById("countryNType").getValue() < 5) {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "موقعیت انتخاب شده در تقسیمات کشوری مجاز نیست.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }
        else {
            var txtStart = App.NewSubSetting_New.queryById('txtStart');
            var cboRound = App.NewSubSetting_New.queryById('cboRound');
            var txtDate = App.NewSubSetting_New.queryById('txtDate');
            var chExempt = App.NewSubSetting_New.queryById('chExempt');
            var chPrint = App.NewSubSetting_New.queryById('chPrint');
            var chHaveScan = App.NewSubSetting_New.queryById('chHaveScan');
            var chExpScan = App.NewSubSetting_New.queryById('chExpScan');
            var chMobileVerify = App.NewSubSetting_New.queryById('chMobileVerify');
            var chApply = App.NewSubSetting_New.queryById('chApply');
            var chSeri = App.NewSubSetting_New.queryById('chSeri');
            var txtCalcDate = App.NewSubSetting_New.queryById('txtCalcDate');
            var cboSerialP = App.NewSubSetting_New.queryById('cboSerialP');
            var cboCharP = App.NewSubSetting_New.queryById('cboCharP');
            var cboSearch = App.NewSubSetting_New.queryById('cboSearch');
            var txtTitle = App.NewSubSetting_New.queryById('txtTitle');
            var txtLast = App.NewSubSetting_New.queryById('txtLast');
            var chCalc = App.NewSubSetting_New.queryById('chCalc');
            var Id = App.NewSubSetting_New.queryById('fldId');
            var taeedSavabegh = App.NewSubSetting_New.queryById('taeedSavabegh');
            var er = false;

            if (txtStart.validate() == false) {
                er = true;
            }
            if (cboRound.validate() == false) {
                er = true;
            }
            if (txtDate.validate() == false) {
                er = true;
            }
            if (txtLast.validate() == false) {
                er = true;
            }
            if (txtTitle.validate() == false) {
                er = true;
            }
            if (chCalc.getValue() == true) {
                if (txtCalcDate.validate() == false) {
                    er = true;
                }
            }
            if (er == true)
                return;
            App.NewSubSetting_New.body.mask("در حال ذخیره سازی...");
            Ext.net.DirectMethod.request({
                url: '/NewVer/SubSetting_New/Save',
                params: {
                    fldDefaultPelakSerial: cboSerialP.getValue(),
                    fldDefaultPelakChar: cboCharP.getValue(),
                    fldDefaultSearch: cboSearch.getValue(),
                    fldStartCodeBillIdentity: txtStart.getValue(),
                    fldRoundID: cboRound.getValue(),
                    fldPrintBill_Payment: chPrint.getValue(),
                    fldExemptNewProduction: chExempt.getValue(),
                    fldTitleUserReport: txtTitle.getValue(),
                    fldLastRespitePayment: txtLast.getValue(),
                    fldImplementationDate: txtDate.rawValue,
                    fldTypeCountryDivisions: App.NewSubSetting_New.queryById("countryNType").getValue(),
                    fldCodeCountryDivisions: App.NewSubSetting_New.queryById("countrySID").getValue(),
                    fldCountryDivisionsTreeApply: chApply.getValue(),
                    fldTypeCar: App.NewSubSetting_New.queryById("CarNType").getValue(),
                    fldCodeCar: App.NewSubSetting_New.queryById("CarSID").getValue(),
                    fldCarSeriesTreeApply: chSeri.getValue(),
                    fldAzAkharinTarikh: txtCalcDate.rawValue,
                    fldCalcFromVariz: chCalc.getValue(),
                    fldHaveScan: chHaveScan.getValue(),
                    fldExpScan: chExpScan.getValue(),
                    fldMobileVerify: chMobileVerify.getValue(),
                    fldId: Id.getValue(),
                    Taeed:taeedSavabegh.getValue()
                },
                success: function (data) {
                    var ic = Ext.MessageBox.INFO;
                    if (data.Er == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        title: data.MsgName,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    App.NewSubSetting_New.body.mask().hide();
                    App.SubSetting_New.queryById('GridSubSetting_New').store.load();
                    if (data.Er != 1)
                        ClearSubSetting_New();
                }

            });
        }
    }
    function ClearSubSetting_New() {
        App.NewSubSetting_New.queryById('cboRound').setValue("");
        App.NewSubSetting_New.queryById('cboSerialP').setValue("");
        App.NewSubSetting_New.queryById('cboCharP').setValue("");
        App.NewSubSetting_New.queryById('txtStart').setValue("");
        App.NewSubSetting_New.queryById('txtDate').setValue("");
        App.NewSubSetting_New.queryById('txtLast').setValue("");
        App.NewSubSetting_New.queryById('txtTitle').setValue("");
        App.NewSubSetting_New.queryById('txtCalcDate').setValue("");
        var chExempt = App.NewSubSetting_New.queryById('chExempt').setValue(false);
        var chPrint = App.NewSubSetting_New.queryById('chPrint').setValue(false);
        var chHaveScan = App.NewSubSetting_New.queryById('chHaveScan').setValue(false);
        var chExpScan = App.NewSubSetting_New.queryById('chExpScan').setValue(false);
        var chMobileVerify = App.NewSubSetting_New.queryById('chMobileVerify').setValue(false);
        var chApply = App.NewSubSetting_New.queryById('chApply').setValue(false);
        var chSeri = App.NewSubSetting_New.queryById('chSeri').setValue(false);
        var chCalc = App.NewSubSetting_New.queryById('chCalc').setValue(false);
        App.NewSubSetting_New.queryById('taeedSavabegh').setValue(false);
        App.NewSubSetting_New.queryById('lblTitleCountry').setText("");
        App.NewSubSetting_New.queryById('lblTitleCar').setText("");
        App.NewSubSetting_New.queryById("countryId").setValue(0);
        App.NewSubSetting_New.queryById("countrySID").setValue(0);
        App.NewSubSetting_New.queryById("countryNType").setValue(0);
        App.NewSubSetting_New.queryById("CarId").setValue(0);
        App.NewSubSetting_New.queryById("CarSID").setValue(0);
        App.NewSubSetting_New.queryById("CarNType").setValue(0);
        App.NewSubSetting_New.queryById('fldId').setValue(0);
        App.TreeCountrySM.getSelectionModel().select(0);
        App.TreeCarSM.getSelectionModel().select(0);
    }
  /*  function EnterNext() {
        var keyfield = App.NewSubSetting_New.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        var nextfld = keyfield.nextSibling();
        nextfld.focus();
        nextfld.selectText();

    }*/
</script>