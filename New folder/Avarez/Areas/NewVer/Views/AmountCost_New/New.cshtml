@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

<style>
    .LblStyle {
        height: auto;
    }

    .LblRed {
        color: red;
    }
</style>

@(Html.X().Window().Modal(true)
.Width(712)
.Resizable(false)
    .Title("تعیین مقدار هزینه")
         .ID("NewAmountCost_New")
        .Closable(true).ButtonAlign(Ext.Net.Alignment.Center)
    .CloseAction(Ext.Net.CloseAction.Destroy)
        .Layout(LayoutType.Fit)
                   .Buttons(X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk)//.ToolTip("کلید میانبر F8")
                               .Listeners(l =>
                               {
                                   l.Click.Handler = "SaveAmountCost_New();";

                               })
                               .ItemID("btnSave")
                                ,
                                X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut)//.ToolTip("کلید میانبر Esc")
                                       .OnClientClick("App.NewAmountCost_New.destroy()"))
    .Items(
        X.FormPanel()
        .Border(false)
            //.Margin(5)
            .DefaultButton("btn")
        .TitleAlign(Ext.Net.TitleAlign.Center)
           .Layout(LayoutType.Fit)
                .Items(
                 
                X.Panel().Border(false).PaddingSpec("5px 0 10px 0")
                    .Layout(Ext.Net.LayoutType.VBox)
                    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
            X.Panel().Layout(LayoutType.HBox).Border(false)
                .LayoutConfig(new Ext.Net.HBoxLayoutConfig { Align = HBoxAlign.Middle })
                  .Defaults(new { Margin = 5 })
            .Items(
                 X.FieldSet()
                .Border(true)
                    .Width(330)
                .Defaults(new { Margin = 5 })
                .Title("مشخصات هزینه")
               .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                .Items(
                X.Hidden().ItemID("fldId"),
                X.Hidden().ItemID("countryId"),
                X.Hidden().ItemID("countrySID"),
                X.Hidden().ItemID("countryNType"),
                X.Hidden().ItemID("CarId"),
                X.Hidden().ItemID("CarSID"),
                X.Hidden().ItemID("CarNType"),
            X.Label("نوع هزینه:"),
         X.ComboBox()
            .ItemID("CboCostType")
        .LabelAlign(Ext.Net.LabelAlign.Top)
        .Editable(false)
        .TypeAhead(true)
        .QueryMode(DataLoadMode.Local)
        .ForceSelection(true)
        .TriggerAction(TriggerAction.All)
        .DisplayField("Name")
        .ValueField("ID")
        .EmptyText("نوع هزینه...")
        .Width(190)
        .Store(X.Store()
        .Model(X.Model()
        .IDProperty("fldCostTypeId")
                .Fields(
                            new ModelField("ID", ModelFieldType.String) { Mapping = "fldID" },
                            new ModelField("Name", ModelFieldType.String) { Mapping = "fldName" }
                )
            )
            .Proxy(X.AjaxProxy()
                    .Url(Url.Action("GetCascadeRound"))
                .Reader(X.JsonReader().Root("data"))
            )
                //.Listeners(li => li.Load.Handler = "LoadAmountCost_New();")
    )
        .AllowBlank(false)
        .MsgTarget(Ext.Net.MessageTarget.Side)
        .BlankText("لطفا نوع هزینه را انتخاب نمایید."),
         X.Label("مقدار هزینه:"),
                     X.TextField()
                     .ItemID("txtAmount")
                    .MaxLength(10)
                    .EnforceMaxLength(true)
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .Width(190)
                    .BlankText("لطفا مقدار هزینه را وارد نمایید.")
                        .MaskRe("/[0-9]/")
                    .AutoFocus(true),
                      X.Label()
                        .Text("تاریخ تعیین هزینه:"),
                    X.PDateField()
                        .ItemID("txtCostDate")
                        .Width(190)
                        .MsgTarget(Ext.Net.MessageTarget.Side)
                        .AllowBlank(false)
                        .MaskRe("/[0-9,/]/")
                        .Editable(true)
                        .BlankText("لطفا تاریخ تعیین هزینه را وارد نمایید.")
                        .LabelAlign(Ext.Net.LabelAlign.Top) 
                  )
                        ,
                    X.FieldSet()
                        .Border(true)
                        .Layout(LayoutType.VBox)
                        .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = VBoxAlign.Right })
                        .Title("فیلتر محاسبات")
                            .Width(330)
                        .Items(
                       X.FieldSet()
                              
                        .Border(false)
                        .Layout(LayoutType.HBox)
                        .Items(
                            X.Checkbox()
                            .ItemID("Car")
                            .LabelAlign(Ext.Net.LabelAlign.Left)
                                .PaddingSpec("0 0 0 3px")
                            .LabelSeparator("")
                            ,X.Label("اعمال سری خودرو")
                            ,X.Checkbox()
                            .ItemID("Country")
                                .PaddingSpec("0 20px 0 3px")
                             .LabelAlign(Ext.Net.LabelAlign.Left)
                            .LabelSeparator("")
                            ,X.Label("اعمال تقسیمات کشوری") 
                                )
                            , X.FieldSet()
                        .Border(false)
                        .Layout(LayoutType.HBox)
                        
                        .Width(250)
                        .Items(
                        X.Checkbox()
                            .ItemID("User")
                             .LabelAlign(Ext.Net.LabelAlign.Left)
                            .PaddingSpec("0 0 0 3px")
                            .LabelSeparator(""),
                            X.Label("موثر بر کاربر") ,
                             X.Checkbox()
                            .ItemID("Mun")
                             .LabelAlign(Ext.Net.LabelAlign.Left)
                                 .PaddingSpec("0 55px 0 3px")
                            .LabelSeparator(""),
                            X.Label("موثر بر شهرداری")
                            )
                              , X.FieldSet()
                        .Border(false)
                        .Layout(LayoutType.HBox)
                        .Width(200)
                        .Items(
                                X.Checkbox()
                            .ItemID("Offices")
                            .LabelAlign(Ext.Net.LabelAlign.Left)
                            .PaddingSpec("0 0 0 3px")
                            .LabelSeparator("")
                             ,X.Label("موثر بر دفاتر") 
                        )
                           
                        )
                        ),
                              X.Panel().Layout(LayoutType.HBox).Border(false).Defaults(new { Margin = 5 })
            .Items(
                        X.FieldSet()
                    .Border(true)
                    .Title("موقعیت در تقسیمات کشوری")
                    .Width(330)
                    .Height(400)
                    .Layout(LayoutType.Column)
                    .Defaults(new { Margin = 2 })
                    .Items(
                              X.TreePanel()
                                .ID("TreeCountry")
                                .AutoScroll(true)
                                .Width(305)
                                .ColSpan(2)
                                .Expand(true)
                                .Height(300)
                                .Expand(true)
                                .UseArrows(true)
                                .Border(false)
                                .Listeners(a =>
                                    {
                                        a.Select.Handler = "GetTreeCountryIdAcc(record);";
                                        a.AfterRender.Handler = "this.getRootNode().expand();";
                                    })
                                               .Root(Html.X().Node().NodeID("1").Cls("0").DataPath("0").Text("جمهوری اسلامی ایران").IconFile("/Content/images/0.png"))
                                                .Listeners(l =>
                                                {
                                                    l.BeforeLoad.Fn = "nodeLoadTreeCountryAcc";
                                                })
                                , X.Label()
                                .Cls("LblRed")
                                .Text("مورد انتخاب شده: ")
                                , X.Label()         
                                                     
                                .Cls("LblStyle")
                                .ItemID("lblTitleCountry")
                                ),
                                    X.FieldSet()
                        .Border(true)
                        .Title("سلسله مراتب خودرو")
                        .Width(330)
                        .Height(400)
                        .Layout(LayoutType.Column)
                        .Defaults(new { Margin = 2 })
                        .Items(
                                  X.TreePanel()
                                    .ID("TreeCar")
                                    .AutoScroll(true)
                                    .Width(305)
                                    .ColSpan(2)
                                    .Expand(true)
                                    .Height(300)
                                    .Expand(true)
                                    .UseArrows(true)
                                    .Border(false)
                                    .Listeners(a =>
                                        {
                                            a.Select.Handler = "GetTreeCarId(record);";
                                            a.AfterRender.Handler = "this.getRootNode().expand();";
                                        })
                                                    .Root(Html.X().Node().NodeID("1").DataPath("0").Cls("0").Text("وسیله نقلیه").IconFile("/Content/images/c0.png"))
                                                    .Listeners(l =>
                                                    {
                                                        l.BeforeLoad.Fn = "nodeLoadTreeCar";
                                                    })
                                    , X.Label()
                                    .Cls("LblRed")
                                    .Text("مورد انتخاب شده: ")
                                    , X.Label()
                                    .Cls("LblStyle")
                                    .ItemID("lblTitleCar")
                                    )
                                    )
                                    )
                    
            )
        )
)
@(Html.X().KeyMap()
                 .ID("NewAmountCost_NewMap")
                 .Target("={App.NewAmountCost_New.getTargetEl()}")
            .Binding(b =>
            {
                b.Add(Html.X().KeyBinding()
                .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                .Handler("SaveAmountCost_New(); ")
                );

            }))
<script type="text/javascript">

    setTimeout("LoadAmountCost_New()", 700);
    var nodeLoadTreeCountryAcc = function (store, operation, options) {
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/NewVer/AmountCost_New/NodeLoadTreeCountry',
            params: {
                nod: node.getId()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand();
            },

            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });

        return false;
    };

    function GetTreeCountryIdAcc(record) {
        var path = record.getPath("text");
        var Text = path.split('/').splice(1).join("-->");
        App.NewAmountCost_New.queryById('countryId').setValue(record.getId());
        App.NewAmountCost_New.queryById('countrySID').setValue(record.data.cls);
        App.NewAmountCost_New.queryById('countryNType').setValue(record.data.dataPath);
        App.NewAmountCost_New.queryById('lblTitleCountry').setText(Text);
    };

    var nodeLoadTreeCar = function (store, operation, options) {
        var node = operation.node;
        Ext.net.DirectMethod.request({
            url: '/NewVer/AmountCost_New/NodeLoadTreeCar',
            params: {
                nod: node.getId()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand();
            },

            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }
        });

        return false;
    };

    function SetDefault1() {
        App.TreeCountry.getSelectionModel().select(0);
    }

    function SetDefault() {
        App.TreeCar.getSelectionModel().select(0);
    }

    function GetTreeCarId(record) {
        var path = record.getPath("text");
        var Text = path.split('/').splice(1).join("-->");
        App.NewAmountCost_New.queryById('CarId').setValue(record.getId());
        App.NewAmountCost_New.queryById('CarSID').setValue(record.data.cls);
        App.NewAmountCost_New.queryById('CarNType').setValue(record.data.dataPath);
        App.NewAmountCost_New.queryById('lblTitleCar').setText(Text);
    };

    function LoadAmountCost_New() {
        if ('@ViewBag.Id' != '0') {
            App.NewAmountCost_New.body.mask("در حال بارگذاری...");
            Ext.net.DirectMethod.request({
                url: '/NewVer/AmountCost_New/Details',
                params: {
                    Id: '@ViewBag.Id'
                },
                success: function (data) {
                    if (data.Er == 0) {
                        var txtAmount = App.NewAmountCost_New.queryById('txtAmount');
                        txtAmount.setValue(data.fldAmount);
                        var CboCostType = App.NewAmountCost_New.queryById('CboCostType');
                        CboCostType.setValue(data.fldCostID);
                        var txtCostDate = App.NewAmountCost_New.queryById('txtCostDate');
                        txtCostDate.setValue(data.fldDateAmount);
                        var Country = App.NewAmountCost_New.queryById('Country');
                        Country.setValue(data.fldCountryDivisionsTreeApply);
                        var Car = App.NewAmountCost_New.queryById('Car');
                        Car.setValue(data.fldCarSeriesTreeApply);
                        var User = App.NewAmountCost_New.queryById('User');
                        User.setValue(data.fldEffectiveUser);
                        var Mun = App.NewAmountCost_New.queryById('Mun');
                        Mun.setValue(data.fldEffectiveMunicipality);
                        var Offices = App.NewAmountCost_New.queryById('Offices');
                        Offices.setValue(data.fldEffectiveOffice);
                        var Id = App.NewAmountCost_New.queryById('fldId');
                        Id.setValue(data.fldId);
                        App.NewAmountCost_New.queryById('countryId').setValue(data.countryid);
                        App.NewAmountCost_New.queryById('countrySID').setValue(data.countryCode);
                        App.NewAmountCost_New.queryById('countryNType').setValue(data.CountryType);
                        App.NewAmountCost_New.queryById('CarId').setValue(data.Carid);
                        App.NewAmountCost_New.queryById('CarSID').setValue(data.carCode);
                        App.NewAmountCost_New.queryById('CarNType').setValue(data.carType);
                        
                        if (data.Path == "/1") {
                            App.TreeCountry.getSelectionModel().select(0);
                        }
                        else {
                            Ext.net.DirectMethod.request({
                                url: '/NewVer/AmountCost_New/LoadPath',
                                params: {
                                    Path: data.Path
                                },
                                success: function (result) {
                                    if (result.length != 0) {
                                        App.TreeCountry.store.getNodeById(data.Path.split('/')[2]).appendChild(result);
                                        var nodee = App.TreeCountry.store.getNodeById(data.Path.split('/')[data.Path.split('/').length - 1]);
                                        App.TreeCountry.expandPath(data.Path);
                                        App.TreeCountry.selectPath(data.Path);
                                    }
                                    else {
                                        App.TreeCountry.selectPath(data.Path);
                                    }
                                },
                                failure: function (errorMsg) {
                                    Ext.Msg.alert('Failure', errorMsg);
                                }
                            });
                        }
                        Ext.net.DirectMethod.request({
                            url: '/NewVer/Discount_New/LoadPathCar',
                            params: {
                                Path: data.CarPath
                            },
                            success: function (result) {
                                if (result.length != 0) {
                                    App.TreeCar.store.getNodeById(data.CarPath.split('/')[2]).appendChild(result);
                                    var nodeeC = App.TreeCar.store.getNodeById(data.CarPath.split('/')[data.CarPath.split('/').length - 1]);
                                    App.TreeCar.expandPath(data.CarPath);
                                    App.TreeCar.selectPath(data.CarPath);
                                }
                                else {
                                    App.TreeCar.selectPath(data.CarPath);
                                }
                            },
                            failure: function (errorMsg) {
                                Ext.Msg.alert('Failure', errorMsg);
                            }
                        });
                        /*countryid = data.countryId;
                        countrySID = data.countryCode;
                        countryNType = data.CountryType;
                        Ext.net.DirectMethod.request({
                            url: '/NewVer/AmountCost_New/CountryPosition',
                            params: {
                                id: countryid
                            },
                            success: function (data) {
                                Ext.net.Mask.hide();
                                App.NewAmountCost_New.queryById('lblTitleCountry').setText(data.Position);
                            }
    
                        });
                        Carid = data.carid;
                        CarSID = data.carCode;
                        CarNType = data.carType;
                        Ext.net.DirectMethod.request({
                            url: '/NewVer/AmountCost_New/CarPosition',
                            params: {
                                id: Carid
                            },
                            success: function (data) {
                                Ext.net.Mask.hide();
                                App.NewAmountCost_New.queryById('lblTitleCar').setText(data.Position);
                            }
                        });*/
                    }
                    else if (data.Er == 1) {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                    App.NewAmountCost_New.body.mask().hide();
                }
            });
        }
        else {
            var CboCostType = App.NewAmountCost_New.queryById('CboCostType');
            CboCostType.setValue(CboCostType.store.getAt(0));
            App.NewAmountCost_New.queryById('txtAmount').validate();
            App.NewAmountCost_New.queryById('CboCostType').validate();
            App.NewAmountCost_New.queryById('txtCostDate').validate();
            SetDefault();
            SetDefault1();
        }

    }

    function SaveAmountCost_New() {
        var txtAmount = App.NewAmountCost_New.queryById('txtAmount');
        var CboCostType = App.NewAmountCost_New.queryById('CboCostType');
        var txtCostDate = App.NewAmountCost_New.queryById('txtCostDate');
        var Country = App.NewAmountCost_New.queryById('Country');
        var Car = App.NewAmountCost_New.queryById('Car');
        var User = App.NewAmountCost_New.queryById('User');
        var Mun = App.NewAmountCost_New.queryById('Mun');
        var Offices = App.NewAmountCost_New.queryById('Offices');
        var Id = App.NewAmountCost_New.queryById('fldId');
        var er = false;

        if (txtAmount.validate() == false) {
            er = true;
        }
        if (CboCostType.validate() == false) {
            er = true;
        }
        if (txtCostDate.validate() == false) {
            er = true;
        }
       
        if (er == true)
            return;
        App.NewAmountCost_New.body.mask("در حال ذخیره سازی...");
        Ext.net.DirectMethod.request({
            url: '/NewVer/AmountCost_New/Save',
            params: {
                fldAmount: txtAmount.getValue(),
                fldCostID: CboCostType.getValue(),
                fldDateAmount: txtCostDate.rawValue,
                fldTypeCountryDivisions:  App.NewAmountCost_New.queryById('countryNType').getValue(),
                fldCodeCountryDivisions: App.NewAmountCost_New.queryById('countrySID').getValue(),
                fldCountryDivisionsTreeApply: Country.getValue(),
                fldTypeCar: App.NewAmountCost_New.queryById('CarNType').getValue(),
                fldCodeCar: App.NewAmountCost_New.queryById('CarSID').getValue(),
                fldCarSeriesTreeApply: Car.getValue(),
                fldId: Id.getValue(),
                fldEffectiveUser: User.getValue(),
                fldEffectiveOffice: Offices.getValue(),
                fldEffectiveMunicipality: Mun.getValue()
               
            },
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    Name: data.MsgName,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                App.NewAmountCost_New.body.mask().hide();
                App.AmountCost_New.queryById('GridAmountCost_New').store.load();
                if (data.Er != 1)
                    ClearAmountCost_New();
            }

        });
    }
    function ClearAmountCost_New() {
        App.NewAmountCost_New.queryById('txtAmount').setValue("");
        App.NewAmountCost_New.queryById('CboCostType').setValue("");
        App.NewAmountCost_New.queryById('txtCostDate').setValue("");
        App.NewAmountCost_New.queryById('Country').setValue(false);
        App.NewAmountCost_New.queryById('Car').setValue(false);
        App.NewAmountCost_New.queryById('User').setValue(false);
        App.NewAmountCost_New.queryById('Mun').setValue(false);
        App.NewAmountCost_New.queryById('Offices').setValue(false);
        App.NewAmountCost_New.queryById('lblTitleCountry').setText("");
        App.NewAmountCost_New.queryById('lblTitleCar').setText("");
        App.NewAmountCost_New.queryById('countryId').setValue(0);
        App.NewAmountCost_New.queryById('countrySID').setValue(0);
        App.NewAmountCost_New.queryById('countryNType').setValue(0);
        App.NewAmountCost_New.queryById('CarId').setValue(0);
        App.NewAmountCost_New.queryById('CarSID').setValue(0);
        App.NewAmountCost_New.queryById('CarNType').setValue(0);
         App.NewAmountCost_New.queryById('fldId').setValue(0);
         App.TreeCountry.getSelectionModel().select(0);
         App.TreeCar.getSelectionModel().select(0);
    }
   /* function EnterNext() {
        var keyfield = App.NewAmountCost_New.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        var nextfld = keyfield.nextSibling();
        nextfld.focus();
        nextfld.selectText();

    }*/
</script>