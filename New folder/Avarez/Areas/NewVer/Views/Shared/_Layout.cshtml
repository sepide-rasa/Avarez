<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>سامانه جامع یکپارچه و هوشمند تشخیص و وصول عوارض خودرو</title>

    @{var apiUrl = System.Configuration.ConfigurationManager.AppSettings["ImageSetting"];
       if(apiUrl=="1")
        {
            <link rel="icon" href="~/Content/استانداری تهران.png" type="image/x-icon" />
        }
    }
    <link href="~/Content/Site1.css" rel="stylesheet" />
    <script src="~/Scripts/jquery-1.11.3.min.js"></script>
    <script src="~/Scripts/json2.min.js" type="text/javascript"></script>
    <script src="~/Scripts/anychart/anychart/anychart-base.min.js?hcode=be5162d915534272a57d0bb781d27f2b"></script>
    <script src="~/Scripts/anychart/anychart/anychart-ui.min.js?hcode=be5162d915534272a57d0bb781d27f2b"></script>
    <script src="~/Scripts/anychart/anychart/anychart-exports.min.js?hcode=be5162d915534272a57d0bb781d27f2b"></script>
    <link href="https://cdn.anychart.com/releases/v8/css/anychart-ui.min.css?hcode=be5162d915534272a57d0bb781d27f2b" type="text/css" rel="stylesheet">
    <link href="https://cdn.anychart.com/releases/v8/fonts/css/anychart-font.min.css?hcode=be5162d915534272a57d0bb781d27f2b" type="text/css" rel="stylesheet">

    <!--Reference the SignalR library. -->
    <script src="~/Scripts/jquery.signalR-1.1.3.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    @*<script src="~/Scripts/pishkhan/chibi-min.js"></script>*@
    <script src="@Url.Content("~/Scripts/accounting.min.js")" type="text/javascript"></script> 
    <script src="@Url.Content("~/signalr/hubs")"></script>
    @*<script src="http://127.0.0.1:8009/signalr/hubs"></script>
    <script>
        $.connection.hub.url = "http://127.0.0.1:8009/signalr";
        var console = $.connection.SSP1126HUB;
    </script>*@
    <style>
        .ux-desktop-trayclock{
            direction:ltr;
        }
    </style>
    <script type="text/javascript">
        var connection = $.hubConnection();
        var chat = connection.createHubProxy("S_hub");
        var OpenedChat = false;
        var OpenedChatUser = false;
        var connectionIdProg = "";
        $(document).ready(function () {
            /*Chhub.client.LoadCheckList = function () {
            if (App.CheckList) {
            App.CheckList.queryById("GridCheckList").store.load();
            App.CheckList.queryById("GridCheckListNotValid").store.load();
            }
            };*/

            chat.on("broadcastMessage" , function (message) {
                /*var c = App.Contain1;
                c.update({ html: message });
                App.pnlScroll.body.scroll('b', 1000000);*/
                if (App.TicketKartabl)
                    ReloadGrid();
                if (OpenedChat) {
                    Ext.net.DirectMethod.request({
                        url: '/newver/TicketKartabl/LoadChatAdmin',
                        params: {
                            Id: SetadUserId,
                            CategoryId: category,
                            PerType: Type
                        },
                        success: function (data) {
                            LoadChatAdmin();
                        }
                    });
                }
                else {
                    Ext.net.DirectMethod.request({
                        url: '/newver/TicketKartabl/GetCountPM',
                        params: {
                        },
                        success: function (data) {
                            var ElUserTicket1 = document.getElementsByClassName("shortcut_SendTicket");
                            var ElAdminTicket1 = document.getElementsByClassName("shortcut-Ticketing");
                            if (data.CountUser == 0) {
                                if (ElUserTicket1[0]) {
                                    ElUserTicket1[0].classList.remove("badge");
                                }
                            }
                            else {
                                var countt = "'" + data.CountUser + "'";
                                Ext.util.CSS.updateRule('.badge::after', 'content', countt);
                                if (ElUserTicket1[0]) {
                                    ElUserTicket1[0].classList.add("badge");
                                }
                            }
                            if (data.CountAdmin == 0) {
                                if (ElAdminTicket1[0]) {
                                    ElAdminTicket1[0].classList.remove("badgeA");
                                }
                            }
                            else {
                                var countt1 = "'" + data.CountAdmin + "'";
                                Ext.util.CSS.updateRule('.badgeA::after', 'content', countt1);
                                if (ElAdminTicket1[0]) {
                                    ElAdminTicket1[0].classList.add("badgeA");
                                }
                            }
                        }
                    });
                }

                if (OpenedChatUser) {
                    Ext.net.DirectMethod.request({
                        url: '/newver/UserTicket/LoadChatUser',
                        params: {
                            Id: SetadUserId,
                            CategoryId: category
                        },
                        success: function (data) {
                            LoadChatUser();
                        }
                    });
                }
                else {
                    Ext.net.DirectMethod.request({
                        url: '/newver/TicketKartabl/GetCountPM',
                        params: {
                        },
                        success: function (data) {
                            var ElUserTicket1 = document.getElementsByClassName("shortcut_SendTicket");
                            var ElAdminTicket1 = document.getElementsByClassName("shortcut-Ticketing");
                            if (data.CountUser == 0) {
                                if (ElUserTicket1[0]) {
                                    ElUserTicket1[0].classList.remove("badge");
                                }
                            }
                            else {
                                var countt = "'" + data.CountUser + "'";
                                Ext.util.CSS.updateRule('.badge::after', 'content', countt);
                                if (ElUserTicket1[0]) {
                                    ElUserTicket1[0].classList.add("badge");
                                }
                            }

                            if (data.CountAdmin == 0) {
                                if (ElAdminTicket1[0]) {
                                    ElAdminTicket1[0].classList.remove("badgeA");
                                }
                            }
                            else {
                                var countt1 = "'" + data.CountAdmin + "'";
                                Ext.util.CSS.updateRule('.badgeA::after', 'content', countt1);
                                if (ElAdminTicket1[0]) {
                                    ElAdminTicket1[0].classList.add("badgeA");
                                }
                            }
                        }
                    });
                }
            });
            connection.start();
            /* chat.client.addMessage = function (message, groupName, userid, FriendId) {
            alert(2);
            }*/
        });
    </script>
    @{
        Avarez.Models.cartaxEntities p = new Avarez.Models.cartaxEntities();
        if (Session["UserId"] != null) {
            var PosIPId = 0;
            var Pos = p.sp_PcPosInfoSelect("fldTreeId","", Convert.ToInt32(Session["CountryType"]), Convert.ToInt32(Session["CountryCode"]), 0).FirstOrDefault();
            if (Pos != null)
            {
                var UserPos = p.sp_PcPosUserSelect("fldIdUser", Session["UserId"].ToString(), 0).FirstOrDefault();
                if (UserPos != null)
                {
                    var PosIp = p.sp_PcPosIPSelect("fldId", UserPos.fldPosIPId.ToString(), 0).FirstOrDefault();
                    if (PosIp != null)
                    {
                        PosIPId = PosIp.fldId;
                    }
                }
            }

            if (PosIPId != 0 && Pos.fldBankId==17)
            {
                <script src="http://127.0.0.1:8009/signalr/hubs"></script>
                <script>
                    $.connection.hub.url = "http://127.0.0.1:8009/signalr";
                    var console = $.connection.SSP1126HUB;
                </script>
            }
        }
    }



    <style type="text/css">
        input[type=text]:focus {
            background: Yellow repeat-x 0 0;
        }

        textarea:focus {
            background: Yellow repeat-x 0 0;
        }

        td {
            text-align: left;
        }
    </style>
    @using Ext.Net.MVC;
    @using Ext.Net;
    @Html.X().ResourceManager().RTL(true).Locale("fa-ir").Theme((Ext.Net.Theme).3)


</head>

@*@using Ext.Net.MVC;
@using Ext.Net;
@Html.X().ResourceManager().RTL(true).Locale("fa-ir")
<script src="~/Scripts/jquery-1.8.2.min.js"></script>

<link href="~/Content/Site1.css" rel="stylesheet" />*@

<body dir="rtl">
    @*<iframe align="left" width="50" height="50" style="z-index:1;right:0px;border: none;position:fixed;bottom:0px;right:auto;left:0px" src="http://chat.ecartax.ir"></iframe>*@
    @*<iframe id="demotext" width="50" height="50" style="z-index:500000000000000000; transform: scale(-1, 1); right:0px;border: none; position:fixed;bottom:0px;right:auto;left:0px" src="http://chat.ecartax.ir"></iframe>*@
    @(Html.X().KeyNav()
        .ID("NewNav")
        .Target("={Ext.getBody()}")
        .Enter(a => a.Handler = "EnterNext();")
    )
    @*@RenderBody()
        <style>
            .x-form-item-label {
                color: black;
                font: normal 12px/14px tahoma,arial,verdana,sans-serif;
                margin-top: 4px;
                text-align: left;
            }

            td {
                vertical-align: top;
            }
        </style>*@
    <script>
        Ext.define("Ext.locale.fa.toolbar.Paging", {
            override: "Ext.PagingToolbar",
            beforePageText: "صفحه",
            afterPageText: "از {0}",
            firstText: "صفحه اول",
            prevText: "صفحه قبل",
            nextText: "صفحه بعد",
            lastText: "صفحه آخر",
            refreshText: "بازخوانی",
            displayMsg: "نمایش {0} - {1} از {2}",
            emptyMsg: 'داده ای برای نمایش وجود ندارد'
        });

        Ext.define("Ext.locale.fa.picker.Month", {
            override: "Ext.picker.Month",
            okText: "تایید",
            cancelText: "انصراف"
        })



        function EnterNext() {
        }

        function Save() { }

        var isWinOpen = false;
        function ReplaceArabic() {
            $("input:text").keyup(function () {
                var str = $(this).val();
                str = str.replace('ك', 'ک');
                str = str.replace('ي', 'ی');
                $(this).val(str);
            });
            $("textarea").keyup(function () {
                var str = $(this).val();
                str = str.replace('ك', 'ک');
                str = str.replace('ي', 'ی');
                $(this).val(str);
            });
        }
        function changeLagToEn(tt) {
            tt.setValue(tt.getValue().replace('ش', 'a'));
            tt.setValue(tt.getValue().replace('ذ', 'b'));
            tt.setValue(tt.getValue().replace('ز', 'c'));
            tt.setValue(tt.getValue().replace('ی', 'd'));
            tt.setValue(tt.getValue().replace('ث', 'e'));
            tt.setValue(tt.getValue().replace('ب', 'f'));
            tt.setValue(tt.getValue().replace('ل', 'g'));
            tt.setValue(tt.getValue().replace('ا', 'h'));
            tt.setValue(tt.getValue().replace('ه', 'i'));
            tt.setValue(tt.getValue().replace('ت', 'j'));
            tt.setValue(tt.getValue().replace('ن', 'k'));
            tt.setValue(tt.getValue().replace('م', 'l'));
            tt.setValue(tt.getValue().replace('ئ', 'm'));
            tt.setValue(tt.getValue().replace('د', 'n'));
            tt.setValue(tt.getValue().replace('خ', 'o'));
            tt.setValue(tt.getValue().replace('ح', 'p'));
            tt.setValue(tt.getValue().replace('ض', 'q'));
            tt.setValue(tt.getValue().replace('ف', 't'));
            tt.setValue(tt.getValue().replace('ق', 'r'));
            tt.setValue(tt.getValue().replace('س', 's'));
            tt.setValue(tt.getValue().replace('ع', 'u'));
            tt.setValue(tt.getValue().replace('ر', 'v'));
            tt.setValue(tt.getValue().replace('ص', 'w'));
            tt.setValue(tt.getValue().replace('ط', 'x'));
            tt.setValue(tt.getValue().replace('غ', 'y'));
            tt.setValue(tt.getValue().replace('ظ', 'z'));
            tt.setValue(tt.getValue().replace('ک', ';'));
            tt.setValue(tt.getValue().replace('ج', '['));
            tt.setValue(tt.getValue().replace('چ', ']'));
            tt.setValue(tt.getValue().replace('ژ', 'C'));
            tt.setValue(tt.getValue().replace('و', ','));
            return tt;
        }
        function chnageLag(tt) {
            tt.setValue(tt.getValue().replace('ش', 'A'));
            tt.setValue(tt.getValue().replace('ذ', 'B'));
            tt.setValue(tt.getValue().replace('ز', 'C'));
            tt.setValue(tt.getValue().replace('ی', 'D'));
            tt.setValue(tt.getValue().replace('ث', 'E'));
            tt.setValue(tt.getValue().replace('ب', 'F'));
            tt.setValue(tt.getValue().replace('ل', 'G'));
            tt.setValue(tt.getValue().replace('ا', 'H'));
            tt.setValue(tt.getValue().replace('ه', 'I'));
            tt.setValue(tt.getValue().replace('ت', 'J'));
            tt.setValue(tt.getValue().replace('ن', 'K'));
            tt.setValue(tt.getValue().replace('م', 'L'));
            tt.setValue(tt.getValue().replace('ئ', 'M'));
            tt.setValue(tt.getValue().replace('د', 'N'));
            tt.setValue(tt.getValue().replace('خ', 'O'));
            tt.setValue(tt.getValue().replace('ح', 'P'));
            tt.setValue(tt.getValue().replace('ض', 'Q'));
            tt.setValue(tt.getValue().replace('ف', 'T'));
            tt.setValue(tt.getValue().replace('ق', 'R'));
            tt.setValue(tt.getValue().replace('س', 'S'));
            tt.setValue(tt.getValue().replace('ع', 'U'));
            tt.setValue(tt.getValue().replace('ر', 'V'));
            tt.setValue(tt.getValue().replace('ص', 'W'));
            tt.setValue(tt.getValue().replace('ط', 'X'));
            tt.setValue(tt.getValue().replace('غ', 'Y'));
            tt.setValue(tt.getValue().replace('ظ', 'Z'));
            tt.setValue(tt.getValue().replace('ک', ';'));
            tt.setValue(tt.getValue().replace('ج', '['));
            tt.setValue(tt.getValue().replace('چ', ']'));
            tt.setValue(tt.getValue().replace('ژ', 'C'));
            tt.setValue(tt.getValue().replace('و', ','));
            return tt;
        }
        function FaLangAlert(str) {
            var IsFa = false;
            var FaId = 0;
            for (var i = 0; i < str.length ; i++) {
                var c = str.codePointAt(i);
                if (c >= 0x0600 && c <= 0x06FF || c == 0xFB8A || c == 0x067E || c == 0x0686 || c == 0x06AF) {
                    IsFa = true;
                    FaId = i;
                }
            }
            if (IsFa) {
                alert("زبان سیستم را به En تغییر دهید.");
                return str.replace(str[FaId], "");
            }
            else
                return str;
        }

        function changeLagToFa(tt) {
            tt.setValue(tt.getValue().replace('a', 'ش'));
            tt.setValue(tt.getValue().replace('b', 'ذ'));
            tt.setValue(tt.getValue().replace('c', 'ز'));
            tt.setValue(tt.getValue().replace('d', 'ی'));
            tt.setValue(tt.getValue().replace('e', 'ث'));
            tt.setValue(tt.getValue().replace('f', 'ب'));
            tt.setValue(tt.getValue().replace('g', 'ل'));
            tt.setValue(tt.getValue().replace('h', 'ا'));
            tt.setValue(tt.getValue().replace('H', 'آ'));
            tt.setValue(tt.getValue().replace('i', 'ه'));
            tt.setValue(tt.getValue().replace('j', 'ت'));
            tt.setValue(tt.getValue().replace('k', 'ن'));
            tt.setValue(tt.getValue().replace('l', 'م'));
            tt.setValue(tt.getValue().replace('m', 'ئ'));
            tt.setValue(tt.getValue().replace('n', 'د'));
            tt.setValue(tt.getValue().replace('o', 'خ'));
            tt.setValue(tt.getValue().replace('p', 'ح'));
            tt.setValue(tt.getValue().replace('q', 'ض'));
            tt.setValue(tt.getValue().replace('t', 'ف'));
            tt.setValue(tt.getValue().replace('r', 'ق'));
            tt.setValue(tt.getValue().replace('s', 'س'));
            tt.setValue(tt.getValue().replace('u', 'ع'));
            tt.setValue(tt.getValue().replace('v', 'ر'));
            tt.setValue(tt.getValue().replace('w', 'ص'));
            tt.setValue(tt.getValue().replace('x', 'ط'));
            tt.setValue(tt.getValue().replace('y', 'غ'));
            tt.setValue(tt.getValue().replace('z', 'ظ'));
            tt.setValue(tt.getValue().replace(';', 'ک'));
            tt.setValue(tt.getValue().replace("'", 'گ'));
            tt.setValue(tt.getValue().replace('[', 'ج'));
            tt.setValue(tt.getValue().replace(']', 'چ'));
            tt.setValue(tt.getValue().replace(',', 'و'));
        }
        /*function changeLagToFa(str) {
            var tt = str;
            tt.setValue(tt.getValue().replace('a', 'ش');
            tt.setValue(tt.getValue().replace('b', 'ذ');
            tt.setValue(tt.getValue().replace('c', 'ز');
            tt.setValue(tt.getValue().replace('d', 'ی');
            tt.setValue(tt.getValue().replace('e', 'ث');
            tt.setValue(tt.getValue().replace('f', 'ب');
            tt.setValue(tt.getValue().replace('g', 'ل');
            tt.setValue(tt.getValue().replace('h', 'ا');
            tt.setValue(tt.getValue().replace('H', 'آ');
            tt.setValue(tt.getValue().replace('i', 'ه');
            tt.setValue(tt.getValue().replace('j', 'ت');
            tt.setValue(tt.getValue().replace('k', 'ن');
            tt.setValue(tt.getValue().replace('l', 'م');
            tt.setValue(tt.getValue().replace('m', 'ئ');
            tt.setValue(tt.getValue().replace('n', 'د');
            tt.setValue(tt.getValue().replace('o', 'خ');
            tt.setValue(tt.getValue().replace('p', 'ح');
            tt.setValue(tt.getValue().replace('q', 'ض');
            tt.setValue(tt.getValue().replace('t', 'ف');
            tt.setValue(tt.getValue().replace('r', 'ق');
            tt.setValue(tt.getValue().replace('s', 'س');
            tt.setValue(tt.getValue().replace('u', 'ع');
            tt.setValue(tt.getValue().replace('v', 'ر');
            tt.setValue(tt.getValue().replace('w', 'ص');
            tt.setValue(tt.getValue().replace('x', 'ط');
            tt.setValue(tt.getValue().replace('y', 'غ');
            tt.setValue(tt.getValue().replace('z', 'ظ');
            tt.setValue(tt.getValue().replace(';', 'ک');
            tt.setValue(tt.getValue().replace("'", 'گ');
            tt.setValue(tt.getValue().replace('[', 'ج');
            tt.setValue(tt.getValue().replace(']', 'چ');
            tt.setValue(tt.getValue().replace(',', 'و');
            return tt;
        }*/
    </script>
    <style>
        .no-js #loader {
            display: none;
        }

        .js #loader {
            display: block;
            position: absolute;
            left: 100px;
            top: 0;
        }

        .se-pre-con {
            /*position: fixed;*/
            left: 0px;
            top: 0px;
            width: 100%;
            height: 100%;
            z-index: 9999;
            background: url("/Content/images/Preloader_8.gif") center no-repeat #fff;
        }

        .se-pre-con2 {
            /*position: fixed;*/
            left: 0px;
            top: 0px;
            width: 100%;
            height: 100%;
            z-index: 9999;
            background: url("/Content/images/Preloader_2.gif") center no-repeat #fff;
        }
    </style>
    @RenderBody()
    @*@Scripts.Render("~/Scripts/bootstrap.js")*@
</body>

<script>
    var ADDONVER, ADDONPOSIP, ADDONPOSID, ADDONOFFICE;
    var paytype; var hasPos = false;
    var BASE_URL = "*";
    $().ready(function () {
        $(window).on('message', function (event) {
            var ev = (typeof (jQuery) !== 'undefined') ? event.originalEvent : event;
            if (typeof ev.data !== 'undefined') {
                var dataArray = ev.data.split("|");
                if (dataArray[1] === 'pg') {
                    switch (dataArray[2]) {
                        case 'payres':
                            var result = dataArray[3].split("#");
                            var hloResStatus = (result[0].length === 8) ? true : false;
                            var payResStatus = result[0].slice(3, 5);
                            if (paytype == 'btnpay') {
                                Ext.net.DirectMethod.request({
                                    url: '/NewVer/SelectParvande/PishkhanPosResive',
                                    success: function () {
                                        App.AvarezWin.body.mask().hide();
                                    }
                                });
                            } else if (paytype == 'btnresipt') {
                                Ext.net.DirectMethod.request({
                                    url: '/NewVer/SelectParvande/PishkhanResiptResive',
                                    success: function () {
                                        App.AvarezWin.body.mask().hide();
                                    }
                                });
                            }
                            if (!hloResStatus && payResStatus === '00') {
                                var payResTrace = result[0].slice(5, 11);
                                var payResTermId = result[0].slice(11, 19);
                                var payResRRN = result[0].slice(19, 31);
                                var payResAmount = result[0].slice(31, 43);
                                if (paytype == 'btnpay') {
                                    Ext.net.DirectMethod.request({
                                        url: '/NewVer/SelectParvande/PishkhanPosVerify',
                                        params: {
                                            Trace: payResTrace,
                                            TermId: payResTermId,
                                            RRN: payResRRN
                                        },
                                        success: function (data) {
                                            App.AvarezWin.body.mask().hide();
                                            Ext.MessageBox.show({
                                                title: data.MsgTitle,
                                                msg: data.Msg,
                                                icon: Ext.MessageBox.INFO,
                                                buttons: Ext.MessageBox.OK
                                            });
                                        }
                                    });
                                } else if (paytype == 'btnresipt') {
                                    App.AvarezWin.body.mask('در حال بارگزاری...');
                                    Ext.net.DirectMethod.request({
                                        url: '/NewVer/SelectParvande/PishkhanResiptVerify',
                                        params: {
                                            Trace: payResTrace,
                                            TermId: payResTermId,
                                            RRN: payResRRN
                                        },
                                        success: function (data) {
                                            App.AvarezWin.body.mask().hide();
                                            Ext.MessageBox.show({
                                                title: data.MsgTitle,
                                                msg: data.Msg,
                                                icon: Ext.MessageBox.INFO,
                                                buttons: Ext.MessageBox.OK
                                            });
                                            if (data.MsgType == "1") {
                                                Ext.net.DirectMethod.request({
                                                    url: '/NewVer/SelectParvande/PrintPishkhanResidWin',
                                                    params: {
                                                        resiptId: data.resiptid
                                                    }
                                                });
                                            }
                                        }
                                    });
                                }
                            } else {
                                if (hloResStatus) {
                                    var msg;
                                    if (result[0] != ADDONPOSID) {
                                        msg = 'شناسه دستگاه کارتخوان با شناسه تنظیم شده در افزونه یکی نیست، لطفا شناسه ' + result[0] + ' را در تنظیمات افزونه وارد نمایید و سپس  مجددا سعی کنید.';
                                        Ext.MessageBox.show({
                                            title: "پرداخت ناموفق",
                                            msg: msg,
                                            icon: Ext.MessageBox.OK,
                                            buttons: Ext.MessageBox.OK
                                        });
                                    } else { $("#nopos").html('وضعیت کارتخوان: آماده به کار'); hasPos = true; }
                                } else {
                                    var msg = 'پرداخت در زمان مقرر انجام نشده یا توسط کاربر لغو گردیده است.';
                                    Ext.MessageBox.show({
                                        title: "پرداخت ناموفق",
                                        msg: msg,
                                        icon: Ext.MessageBox.OK,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                App.AvarezWin.body.mask().hide();

                            }
                            break;
                        case 'conerr':
                            var msg;
                            $("#nopos").html('وضعیت کارتخوان: عدم وجود ارتباط');
                            break;
                        case 'isalive':
                            var resArray = dataArray[3].split('#');
                            $("#noaddon").hide();
                            $("#yesaddon").show();
                            ADDONVER = resArray[0];
                            ADDONPOSIP = resArray[1];
                            ADDONPOSID = resArray[2];
                            ADDONOFFICE = resArray[3];
                            window.postMessage("pg|cs|pay|HELLO#0", BASE_URL);
                            break;
                        case 'die':
                            updatePOSPanel('درخواست پایان کاربری به کارتخوان ارسال شد، در صورت تمایل به استفاده مجدد کلید F2 را از روی کارتخوان فشار دهید.');
                            window.postMessage("pg|cs|pay|EXIT#0", base_url);
                            break;
                        default:
                            console.log('توجه', dataArray[3]);
                    }

                }
            }
        });
    });
    function paytax(val, ref) {
        window.postMessage("pg|cs|pay|" + val + "#" + ref, BASE_URL);
    }
</script>
</html>