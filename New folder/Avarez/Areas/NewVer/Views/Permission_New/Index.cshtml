@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{

    var X = Html.X();
}

@(X.Panel().Border(false)
            .ID("Permission_New")
    .Title("تعیین دسترسی")
            .Closable(true)
            .AutoScroll(true)
            .CloseAction(Ext.Net.CloseAction.Destroy)
            .Items(
                X.Panel().Border(false)
                .Border(false)
                .AutoScroll(true)
    .KeyMap(
        Html.X().KeyMap()
            .ID("Permission_NewMap")
            .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
            .Binding(b =>
            {
                b.Add(Html.X().KeyBinding()
                    .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                    .Handler("SavePermission_New(); ")
                );

            }))
    .Items(
        X.Panel()
            .Border(false)
            .TopBar(
                Html.X().Toolbar()
                    .Items(


                            X.Button()
                                .Text("ذخیره")
                                .Icon(Ext.Net.Icon.Add)
                             //   .ToolTip("کلید میانبر F8")
                                .Listeners(li => li.Click.Handler = "SavePermission_New();")
                                , X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help)
                                .Listeners(de =>
                                    {
                                        de.Click.Handler = "HelpPermission_New();";
                                    })
                            )
                        )
            .Items(
                X.Panel()
                        .ItemID("Panel")
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 2 })
                    .Defaults(new { Margin = 10 })
                    .Height(50)
                    .Items(
                            X.Label("گروه کاربری:"),
                        X.ComboBox()
                            .LabelAlign(Ext.Net.LabelAlign.Top)
                            .ItemID("CboGrohKarbari")
                            .Width(300)
                            .TypeAhead(true)
                            .Editable(false)
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("fldID")
                            //.Listeners(l=>l.Render.Handler="setDefault()")
                            .Listeners(a =>
                            {
                                a.Change.Handler = "Change()";
                            }
                            )
                            .Store(
                                X.Store()
                                    .Model(
                                        X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("fldID", ModelFieldType.String) { Mapping = "fldID" },
                                                new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                                    )
                                        )
                                    .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetUserGroup"))
                                    .Reader(X.JsonReader().Root("data"))
                                     )
                                     .Listeners(li => li.BeforeLoad.Handler = "LoadUserGroup();")
                             )
                    ),
                X.Panel()
                    .Border(false)
                    .Items(
                        X.TreePanel()
                            .ID("Tree")
                            .AutoScroll(true)
                            .Width(500)
                            .ColSpan(2)
                            .Expand(true)
                            .UseArrows(true)
                            .Border(false)
                            .Listeners(a =>
                            {
                                a.AfterRender.Handler = "setDefault()";
                                a.ItemClick.Handler = "GetId(record)";
                                a.BeforeLoad.Fn = "nodeLoad";
                                a.CheckChange.Fn = "GetGroupId";
                            })
                            .Root(
                                Html.X().Node()
                                    .NodeID("0")
                                    .Text("تعیین دسترسی")
                                    .Checked(false))
                            )
            )

                        )
)
)
<script type="text/javascript">
    var n;
    var NodeId;
    var id;
    var node2;
    var GetGroupId = function (node, checked, eOpts) {
        node.cascadeBy(function (n) { n.set('checked', checked); });
        /*node.parentNode.set('checked', true);*/
        node2 = node;
        while (node2.parentNode != null) {
            node2.parentNode.set('checked', true);
            node2 = node2.parentNode;
        }
    };




    function setDefault() {
        var GrohKarbari = App.Permission_New.queryById('CboGrohKarbari');
        GrohKarbari.setValue(GrohKarbari.store.getAt(0));
        App.Tree.getRootNode().expand();
    }

    function LoadUserGroup() {
        Ext.net.DirectMethod.request({
            url: '/NewVer/Permission_New/ReloadDrp',
            success: function (data) {
                var CboType = App.Permission_New.queryById('CboGrohKarbari');
                CboType.setValue(data.fldUserGroupId);
            }
    });
    }

    function setSize() {
        var height=App.Permission_New.getHeight();
        App.Tree.setHeight(height-120);
    }

    function Change() {
        var GrohKarbari = App.Permission_New.queryById('CboGrohKarbari');
        Ext.net.DirectMethod.request({
            url: '/NewVer/Permission_New/NodeLoad',
            params: {
                node: "0",
                GrohKarbari: GrohKarbari.getValue()
            },
            success: function () {
                Reload();
            },
            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }

        });
        return false;
    }

    var nodeLoad = function (store, operation, options) {
        n = operation.node;
        var GrohKarbari = App.Permission_New.queryById('CboGrohKarbari');
        
        var node = operation.node;
        if(GrohKarbari.getValue()!=null)
        Ext.net.DirectMethod.request({
            url: '/NewVer/Permission_New/NodeLoad',
            params: {
                node: node.getId(),
                GrohKarbari: GrohKarbari.getValue()
            },
            success: function (result) {
                node.set('loading', false);
                node.set('loaded', true);
                node.appendChild(result);
                node.expand(true);
            },
            timeout: 50000000
            /*failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }*/
        });
        return false;
    };

    function Reload() {
        App.Tree.store.load();
    };

    function GetId(record) {
        NodeId = record.getId();
    };

    function SavePermission_New() {
        var Father = App.Tree;
        var Checked = Father.getChecked();
        if (Checked == []) { return; }
        var Permission = new Array();
        var CboGrohKarbari = App.Permission_New.queryById('CboGrohKarbari');
        var FatherId;
        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        for (var i = 0; i < Checked.length ; i++) {
            FatherId = Checked[i];
            if (FatherId.getId() != 0) {
                Permission.push({
                    'RolId': FatherId.getId(),
                    'GroupId': CboGrohKarbari.getValue()
                });
            }
        }

        var data = {
            Permission: Permission,
            'UserGroupID': CboGrohKarbari.getValue()
        };
        $.ajax({
            type: "POST",
            url: '/NewVer/Permission_New/SavePermission',
            datatype: "json",
            data: JSON.stringify(data),
            contentType: 'application/json',
            success: function (data) {
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: Ext.MessageBox.INFO,
                    buttons: Ext.MessageBox.OK
                });
                Ext.net.Mask.hide();
            },
            failure: function (data) {
                alert(data.data);
            }
        });
    }
    function HelpPermission_New() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/NewVer/Permission_New/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
</script>